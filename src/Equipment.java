
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.tools.Executable;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.InputMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author JOE
 */
public class Equipment extends javax.swing.JFrame {
    java.sql.Date servicedate;   String staffname;String printedby;        Document   receiptDoc; Image companylogo;
   String currentuser;String usertype;String directory; String contractnum;
Home access=new Home(); 
          String cols[]={"","NO.","CONTRACT NO","MODEL","DESCRIPTION","SERIAL NO","LOCATION"};
     DefaultTableModel equiptableModel=new DefaultTableModel(cols,0);
   SimpleDateFormat sdf=new SimpleDateFormat("dd MMM,yyyy");

    DecimalFormat df1 =new DecimalFormat("#,###.00");
    
    public Equipment() {
        initComponents();
        
     int b=   equipTable.getRowCount();
     equiptableModel.addRow(new Object[]{false,b+1,"","","","",""});
    // equipTable.editCellAt(0, 2);
        equipTable.setSurrendersFocusOnKeystroke(true);
//        equipTable.getEditorComponent().requestFocus();
   equipTable.getColumnModel().getColumn(0).setPreferredWidth(1);
    equipTable.getColumnModel().getColumn(1).setPreferredWidth(2);
    /* equipTable.getColumnModel().getColumn(2).setPreferredWidth(5);
      equipTable.getColumnModel().getColumn(3).setPreferredWidth(7);
       equipTable.getColumnModel().getColumn(4).setPreferredWidth(4);*/
       
         equipTable.getTableHeader().setReorderingAllowed(false);
       InputMap im=equipTable.getInputMap(
        JTable.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT );
        KeyStroke enterkey=KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0);
        im.put(enterkey, enterkey);
        
       TableColumn tc =equipTable.getColumnModel().getColumn(0);
     tc.setCellEditor(equipTable.getDefaultEditor(Boolean.class));
     tc.setCellRenderer(equipTable.getDefaultRenderer(Boolean.class));
     
    }
    
    public boolean vaidCheck()
{
if(equipTable.getCellEditor()!=null){
equipTable.getCellEditor().stopCellEditing();
}
for(int i=0;i< equipTable.getRowCount();i++)
{
for (int j=0;j<equipTable.getColumnCount();j++)
{
    try{
 String om=equipTable.getValueAt(i,j).toString();
System.out.println("Value ="+om+ " and Length :"+om.length());
if(om.trim().length()==0)
{
return false;
}   
    } catch(NullPointerException ex){
   // JOptionPane.showMessageDialog(null, "Cell is empty !");
    }
}
}
return true;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        equipmentPanel = new javax.swing.JPanel();
        holderPanel = new javax.swing.JPanel();
        contractdetailPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        contractnoTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        clientnameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        descriptionTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        validfromTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        toTxt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        equipTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        EQUIPSAVE = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        deletebtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        searchserialTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        equipmentPanel.setBackground(new java.awt.Color(153, 0, 153));
        equipmentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CONTRACT EQUIPMENT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        holderPanel.setBackground(new java.awt.Color(255, 255, 255));

        contractdetailPanel.setBackground(new java.awt.Color(255, 255, 255));
        contractdetailPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contract Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(153, 0, 153))); // NOI18N
        contractdetailPanel.setToolTipText("ENTER CONTRACT NUMBER");
        contractdetailPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                contractdetailPanelMouseExited(evt);
            }
        });

        jLabel1.setText("Contract Number:");

        contractnoTxt.setText("Enter Contract Number");
        contractnoTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contractnoTxtMouseClicked(evt);
            }
        });
        contractnoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                contractnoTxtKeyReleased(evt);
            }
        });

        jLabel2.setText("CLIENT :");

        clientnameTxt.setEditable(false);

        jLabel3.setText("DESCRIPTION:");

        descriptionTxt.setEditable(false);

        jLabel4.setText("VALID FROM:");

        validfromTxt.setEditable(false);

        jLabel5.setText("TO:");

        toTxt.setEditable(false);

        javax.swing.GroupLayout contractdetailPanelLayout = new javax.swing.GroupLayout(contractdetailPanel);
        contractdetailPanel.setLayout(contractdetailPanelLayout);
        contractdetailPanelLayout.setHorizontalGroup(
            contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contractdetailPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(contractdetailPanelLayout.createSequentialGroup()
                        .addComponent(validfromTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(toTxt))
                    .addComponent(contractnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clientnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        contractdetailPanelLayout.setVerticalGroup(
            contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contractdetailPanelLayout.createSequentialGroup()
                .addGroup(contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(contractdetailPanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1))
                    .addGroup(contractdetailPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(contractnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clientnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(contractdetailPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(validfromTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(toTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Equipment List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(204, 0, 204))); // NOI18N

        equipTable.setModel(equiptableModel);
        equipTable.setToolTipText("SELECT SERIAL NUMBER TO SEE CONTRACT DETAILS");
        equipTable.setCellSelectionEnabled(true);
        equipTable.setFillsViewportHeight(true);
        equipTable.setGridColor(new java.awt.Color(153, 0, 153));
        equipTable.setRowHeight(25);
        equipTable.setRowMargin(2);
        equipTable.setSelectionBackground(new java.awt.Color(204, 0, 204));
        equipTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                equipTableMouseClicked(evt);
            }
        });
        equipTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                equipTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(equipTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 863, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16), new java.awt.Color(204, 0, 204))); // NOI18N

        EQUIPSAVE.setText("Save");
        EQUIPSAVE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EQUIPSAVEActionPerformed(evt);
            }
        });

        jButton2.setText("Update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        deletebtn.setText("Delete");
        deletebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deletebtnMouseClicked(evt);
            }
        });
        deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletebtnActionPerformed(evt);
            }
        });

        jButton4.setText("Print List");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(EQUIPSAVE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(deletebtn))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jButton4))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jButton2)))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EQUIPSAVE)
                    .addComponent(jButton2))
                .addGap(81, 81, 81)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deletebtn)
                    .addComponent(jButton4))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        searchserialTxt.setText("Search Serial Number");
        searchserialTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchserialTxtMouseClicked(evt);
            }
        });
        searchserialTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchserialTxtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout holderPanelLayout = new javax.swing.GroupLayout(holderPanel);
        holderPanel.setLayout(holderPanelLayout);
        holderPanelLayout.setHorizontalGroup(
            holderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(holderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(912, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, holderPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(searchserialTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
            .addGroup(holderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(holderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(contractdetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(904, Short.MAX_VALUE)))
            .addGroup(holderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, holderPanelLayout.createSequentialGroup()
                    .addContainerGap(376, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        holderPanelLayout.setVerticalGroup(
            holderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, holderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchserialTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 285, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(holderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(holderPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(contractdetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(309, Short.MAX_VALUE)))
            .addGroup(holderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(holderPanelLayout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(41, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout equipmentPanelLayout = new javax.swing.GroupLayout(equipmentPanel);
        equipmentPanel.setLayout(equipmentPanelLayout);
        equipmentPanelLayout.setHorizontalGroup(
            equipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equipmentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(holderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        equipmentPanelLayout.setVerticalGroup(
            equipmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(equipmentPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(holderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(equipmentPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(equipmentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void equipTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_equipTableKeyPressed
    if(evt.getKeyCode()==10){
       int rowindex=equipTable.getSelectedRow();
       int colindex=equipTable.getSelectedColumn();
       equipTable.editCellAt(rowindex+1, 2);
       evt.consume();
//     studregTable.setColumnSelectionInterval(rowindex, colindex+1);
  if(vaidCheck())
{
int row=equipTable.getRowCount();
  equiptableModel.addRow(new Object[]{ (false),row+1,"","","","","" });
   equipTable.editCellAt(rowindex+1, 2);
}
else
{
JOptionPane.showMessageDialog(null,"Please fill in all the empty fields !","Alert",JOptionPane.WARNING_MESSAGE);
}
      // studregTable.setSurrendersFocusOnKeystroke(true);
//        studregTable.getEditorComponent().requestFocus();
       }

    }//GEN-LAST:event_equipTableKeyPressed
public void getEquipment(){
         String getcontractsql;  
         try {
if(!contractnoTxt.getText().equalsIgnoreCase("Enter contract number")&&!contractnoTxt.getText().isEmpty()){
getcontractsql="SELECT * FROM EQUIPMENT WHERE CONTRACT_NO LIKE '"+ contractnoTxt.getText()+"%'" +
                  "  ORDER BY MODEL ASC";
}
else if(!searchserialTxt.getText().equalsIgnoreCase("Search serial number")&&!searchserialTxt.getText().isEmpty()){
getcontractsql="SELECT * FROM EQUIPMENT WHERE SERIAL_NO LIKE '"+ searchserialTxt.getText()+"%'" +
                  "  ORDER BY MODEL ASC";
}
else{
getcontractsql="SELECT * FROM EQUIPMENT ORDER BY MODEL ASC";
}
    Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
          PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
          ResultSet rst=pst.executeQuery(); int i=0;
   int h=equipTable.getRowCount();
   for(int b=0;b<h;b++){
   equiptableModel.removeRow(0);
   }
          while(rst.next()){
 equiptableModel.addRow(new Object[]{false,i+1,rst.getString("CONTRACT_NO"),rst.getString(3),rst.getString(4),rst.getString(1),rst.getString("LOCATION")});
        i++;
          }
          if(i<1){
          equiptableModel.addRow(new Object[]{false,1,"","","","",""});
          }
      } catch (SQLException ex) {
        Logger.getLogger(Equipment.class.getName()).log(Level.SEVERE, null, ex);
    }


}
    private void contractnoTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contractnoTxtKeyReleased
     if(!contractnoTxt.getText().equalsIgnoreCase("Enter Contract Number")){  
         getContracts();
     
     }
      
    }//GEN-LAST:event_contractnoTxtKeyReleased

    private void contractdetailPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contractdetailPanelMouseExited
if(contractnum!=null){ contractnoTxt.setText(contractnum); }
    }//GEN-LAST:event_contractdetailPanelMouseExited

    private void contractnoTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contractnoTxtMouseClicked
      contractnoTxt.setText(null); 
    }//GEN-LAST:event_contractnoTxtMouseClicked

    private void EQUIPSAVEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EQUIPSAVEActionPerformed
  if(!contractnoTxt.getText().equalsIgnoreCase("Enter contract number")&&!contractnoTxt.getText().isEmpty()){
      try {
          String getcontractsql="SELECT CONTRACTS.CONTRACT_NO, CONTRACTS.CONT_DESCRIP, CONTRACTS.CLIENT_NO,CLIENTS.CLIENTNAME,"
                  + "CONTRACTS.START,CONTRACTS.END FROM CONTRACTS " +
                  " LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO WHERE  CONTRACTS.CONTRACT_NO = " +
                  " '"+ contractnoTxt.getText()+"' ORDER BY CLIENTS.CLIENTNAME ASC";
          Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
          PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
          ResultSet rst=pst.executeQuery(); int i=0;
          
          while(rst.next()){
             i++;
          }
         
    if(i>0){
          int row=equipTable.getRowCount(); 
          if(row>0){
                if(vaidCheck()==true){
     String serial,model,description,location; 
     String insertsql; PreparedStatement pst2;
     int g=0;
 
  int choice=JOptionPane.showConfirmDialog(null, "Do you want to save the equipment under contract number: "+contractnoTxt.getText()+" ?","Confirm",JOptionPane.YES_NO_OPTION);
   if(choice==JOptionPane.YES_OPTION){
       for(int t=0;t<row;t++){
   serial=String.valueOf(equipTable.getValueAt(t, 5));
   model=String.valueOf(equipTable.getValueAt(t, 3));
   description=String.valueOf(equipTable.getValueAt(t, 4));
   location=String.valueOf(equipTable.getValueAt(t, 6));
   
   insertsql="INSERT INTO EQUIPMENT VALUES(?,?,?,?,?)";
     pst2=(PreparedStatement)connectDb.prepareStatement(insertsql);
     pst2.setString(1, serial); pst2.setString(2, contractnoTxt.getText());
          pst2.setString(3, model);     pst2.setString(4, description);
               pst2.setString(5, location);
            g=   pst2.executeUpdate();
   }             
  if(g>0){
      getEquipment();
       JOptionPane.showMessageDialog(null, "Equipment list for "+clientnameTxt.getText()+" saved  successfully!","Successful",JOptionPane.INFORMATION_MESSAGE);
       }
   }                   
   }
                else{
   JOptionPane.showMessageDialog(null, "Please fill in the Equipment list with equipment details!","Equipment Required",JOptionPane.WARNING_MESSAGE);
                }    
              }
      }
    else{
 JOptionPane.showMessageDialog(null, "Contract number "+ contractnoTxt.getText()+" does not exist!","Valid Contract Number Required",JOptionPane.ERROR_MESSAGE);
  }
      
      } catch (SQLException ex) {
    JOptionPane.showMessageDialog(null, "Serial number must be unique !","Unique Serial Required",JOptionPane.WARNING_MESSAGE);       
          Logger.getLogger(Equipment.class.getName()).log(Level.SEVERE, null, ex);
      }
            }
  else{
      JOptionPane.showMessageDialog(null, "Please enter the contract number","Contract Number Required",JOptionPane.WARNING_MESSAGE);
  }
    }//GEN-LAST:event_EQUIPSAVEActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
 if(contractnoTxt.getText().equalsIgnoreCase("Enter contract number")||contractnoTxt.getText().isEmpty()){
 JOptionPane.showMessageDialog(null,"Please enter the contract number!");
 }else{
 int row=equipTable.getRowCount();
 if(row<1){
  JOptionPane.showMessageDialog(null,"No equipment found under contract number "+contractnoTxt.getText()+" !","No Equipment Found",JOptionPane.ERROR_MESSAGE);

 }else{
 int choice=JOptionPane.showConfirmDialog(null, "Do you want to update equipment list for "+clientnameTxt.getText()+" contract ?","Confirm",JOptionPane.YES_NO_OPTION);
 if(choice==JOptionPane.YES_OPTION){
     String serial ;    String updatesql;
          try {
   Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
    if(vaidCheck()==true){
     String  model,description,location; 
     PreparedStatement pst2; int h=0;
     for(int g=0;g<row;g++){
      serial=String.valueOf(equipTable.getValueAt(g, 5));
        updatesql="UPDATE EQUIPMENT SET MODEL=?, DESCRIPTION=?,LOCATION=? WHERE SERIAL_NO='"+serial+"'";
         pst2=(PreparedStatement)connectDb.prepareStatement(updatesql);
     model=String.valueOf(equipTable.getValueAt(g, 3));
   description=String.valueOf(equipTable.getValueAt(g, 4));
   location=String.valueOf(equipTable.getValueAt(g, 6));
   //JOptionPane.showMessageDialog(null, "Location "+location); 
    pst2.setString(1, model);  
    pst2.setString(2, description);
   pst2.setString(3, location);  
  h=pst2.executeUpdate();
     }
      if(h>0){
          getEquipment();
      JOptionPane.showMessageDialog(null, "Update made successfully for "+clientnameTxt.getText()+" Equipment list!","Successful",JOptionPane.INFORMATION_MESSAGE);
      }    
          }
     else{
     JOptionPane.showMessageDialog(null, "Please fill in all fields of Equipment list!","All Fields Required",JOptionPane.WARNING_MESSAGE);
     }   
          }
          catch (SQLException ex) {
             Logger.getLogger(Equipment.class.getName()).log(Level.SEVERE, null, ex);
         }
     
     }
    
 }
 
 }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void equipTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_equipTableMouseClicked
    try {
       int rowcount= equipTable.getRowCount();
  if(rowcount>0){     
        int row=equipTable.getSelectedRow();
        String serial=String.valueOf(equipTable.getValueAt(row, 5));
        String getcontractsql="SELECT CONTRACTS.CONTRACT_NO, CONTRACTS.CONT_DESCRIP,CLIENTS.CLIENTNAME,"
                + "CONTRACTS.START,CONTRACTS.END,EQUIPMENT.SERIAL_NO FROM CONTRACTS " +
                " LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
                + " LEFT JOIN EQUIPMENT ON CONTRACTS.CONTRACT_NO=EQUIPMENT.CONTRACT_NO "
                + "WHERE  EQUIPMENT.SERIAL_NO  =" +
                " '"+ serial+"'";
        System.out.println("Serial number selected "+serial);
        Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
        PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
        ResultSet rst=pst.executeQuery(); int i=0;
        
        while(rst.next()){
         contractnoTxt.setText(rst.getString(1));
            clientnameTxt.setText(rst.getString(3));
            descriptionTxt.setText(rst.getString(2));
            validfromTxt.setText(sdf.format(rst.getDate(4)));
            toTxt.setText(sdf.format(rst.getDate(5)));
            i++;
        }
  }else{
  
  }
    } catch (SQLException ex) {
        Logger.getLogger(Equipment.class.getName()).log(Level.SEVERE, null, ex);
    }

  
    }//GEN-LAST:event_equipTableMouseClicked

    private void deletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletebtnActionPerformed
    try {
        int row=equipTable.getSelectedRow();
        String serial;
       /* String getcontractsql="SELECT CONTRACTS.CONTRACT_NO, CONTRACTS.CONT_DESCRIP,CLIENTS.CLIENTNAME,"
                + "CONTRACTS.START,CONTRACTS.END,EQUIPMENT.SERIAL_NO FROM CONTRACTS " +
                " LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
                + " LEFT JOIN EQUIPMENT ON CONTRACTS.CONTRACT_NO=EQUIPMENT.CONTRACT_NO "
                + "WHERE  EQUIPMENT.SERIAL_NO  =" +
                " '"+ serial+"'";*/
       
       
        String deletesql;
        
          TableModel model1=equipTable.getModel(); String delselectedColumns1=null;
                    for(int i=0; i<model1.getRowCount();i++){
                        
       if((Boolean) model1.getValueAt(i,0)){
     delselectedColumns1=equipTable.getModel().getValueAt(i,0).toString();
       }
                    }
            if(delselectedColumns1==null){
  JOptionPane.showMessageDialog(rootPane,"Please select at least one equipment from the table !","Alert",JOptionPane.WARNING_MESSAGE);
                    }else{
             
     Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);            
    PreparedStatement pstdel;                 
  int choice=JOptionPane.showConfirmDialog(rootPane, "Do you want to delete selected equipment?","Confirm",JOptionPane.YES_NO_OPTION);
    if(choice==JOptionPane.YES_OPTION){            
                int k=0;
    TableModel model2=equipTable.getModel(); 
    for(int i=0; i<model2.getRowCount();i++){
                        if((Boolean) model2.getValueAt(i,0)){
                            delselectedColumns1=equipTable.getModel().getValueAt(i,4).toString();
   deletesql="DELETE FROM EQUIPMENT WHERE  SERIAL_NO  ='"+ delselectedColumns1+"'" ;
     pstdel=(PreparedStatement)connectDb.prepareStatement(deletesql);
     k= pstdel.executeUpdate();
   } 
    }
    if(k>0){
        getEquipment();
  JOptionPane.showMessageDialog(rootPane, "Selected equipment deleted successfully !","Success",JOptionPane.INFORMATION_MESSAGE);
    }   
    }   
            }            
    } catch (SQLException ex) {
        Logger.getLogger(Equipment.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_deletebtnActionPerformed

    private void deletebtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deletebtnMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_deletebtnMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
//getEquipment();
        if(contractnoTxt.getText().equalsIgnoreCase("Enter contract number")||contractnoTxt.getText().isEmpty()){
 JOptionPane.showMessageDialog(null,"Please enter the contract number!","Contract Number Required",JOptionPane.WARNING_MESSAGE);
 }else{
 int row=equipTable.getRowCount();
 if(row<1){
  JOptionPane.showMessageDialog(null,"No equipment found under contract number "+contractnoTxt.getText()+" !","No Equipment Found",JOptionPane.ERROR_MESSAGE);

 }else{ 
     FileOutputStream filename=null; 
     receiptDoc=new Document(PageSize.A4 ); 
      JFileChooser filesaver=new JFileChooser();
       filesaver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          int option=filesaver.showSaveDialog(equipmentPanel);
          if(option==JFileChooser.APPROVE_OPTION){
    try {
        String   dir=filesaver.getSelectedFile().toString();
        try {
            Connection connectDb=(Connection)DriverManager.getConnection(access.server, access.username,access.dbpword);
          String sqllogo="SELECT LOGO FROM SETTINGS";
            com.mysql.jdbc.PreparedStatement pstlogo=(com.mysql.jdbc.PreparedStatement) connectDb.prepareStatement(sqllogo);
            ResultSet rst=pstlogo.executeQuery();
            
            if(rst!=null){
            while(rst.next()){
            byte[] byt = null;
            /*sacconame=rst.getString(1);
            saccoaddress=rst.getString(3);
            saccomotto=rst.getString(2);
            saccotel=rst.getString(6);
            email=rst.getString(7);
            mobile=rst.getString(8);*/
            byt=rst.getBytes(1);
            companylogo = Toolkit.getDefaultToolkit().createImage(byt);
            }
            }
          String printdate=new SimpleDateFormat("dd MMM, yyyy").format(Calendar.getInstance().getTime()); 
          
       directory=dir+"/"+clientnameTxt.getText()+" EQUIPMENT LIST "+printdate+" .pdf";
                filename = new FileOutputStream(directory);
            
   PdfWriter writer=PdfWriter.getInstance(receiptDoc ,filename);
            receiptDoc.open();
            Paragraph space=new Paragraph("          ");
            com.itextpdf.text.Font font1=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,22,Font.BOLD);
            com.itextpdf.text.Font font2=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,13,Font.BOLD);
            com.itextpdf.text.Font font3=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,18,Font.BOLD);
            com.itextpdf.text.Font font4=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.HELVETICA,6,Font.LAYOUT_LEFT_TO_RIGHT);
             com.itextpdf.text.Font font5=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.COURIER,13,Font.LAYOUT_LEFT_TO_RIGHT);
            
            
            Paragraph date=new Paragraph( "  Printed: "+printdate,font4);
            date.setAlignment(Paragraph.ALIGN_RIGHT);
            receiptDoc.add(date);
            
          com.itextpdf.text.Image image = com.itextpdf.text.Image.getInstance(  companylogo , null); 
image.setAbsolutePosition(05, 780);
         image.scaleToFit(150,50);
 writer.getDirectContent().addImage(image);  receiptDoc.add(space);   receiptDoc.add(space); 
  
            //Paragraph schname=new Paragraph( sacconame,font4); schname.setAlignment(Paragraph.ALIGN_CENTER);
              String separator="______________________________________________________________________________";
            Paragraph separatorlable=new Paragraph(separator,font2);
               separatorlable.setAlignment(Paragraph.ALIGN_CENTER);
              //  receiptDoc.add(separatorlable);
            String separator2="  _____________________________________________________________________________";
            Paragraph separatorlable3=new Paragraph(separator2,font2);
               separatorlable.setAlignment(Paragraph.ALIGN_CENTER);
               
            Paragraph receiptlabel=new Paragraph("TECHNICAL SERVICE DEPARTMENT     ",font1);
            receiptlabel.setAlignment(Paragraph.ALIGN_CENTER);  receiptDoc.add(receiptlabel);
             receiptDoc.add(separatorlable3); 
         receiptDoc.add(space);
         
     Paragraph receiptlabel2=new Paragraph("  CONTRACT EQUIPMENT LIST  ",font3);
                receiptlabel2.setAlignment(Paragraph.ALIGN_CENTER);
                receiptDoc.add(receiptlabel2);  receiptDoc.add(separatorlable3);  receiptDoc.add(space); 
                
   float[] colswidth;      com.itextpdf.text.pdf.PdfPTable subjreportTable = null;
 
   float[] colswidth2=new float[]{10f,10f };
   PdfPTable colstable=new PdfPTable(colswidth2);
     colstable .setWidthPercentage(100);
     
   PdfPCell cell1=new PdfPCell(new Phrase("CLIENT: "+clientnameTxt.getText() ,font2));cell1.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell1); 
    
     PdfPCell cell2=new PdfPCell(new Phrase("CONTRACT NO: "+contractnoTxt.getText(),font2));cell2.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell2); 
    
    receiptDoc.add(colstable); 
 Paragraph cell3=new Paragraph(new Phrase("CONTRACT DESCRIPTION:"+ descriptionTxt.getText()+" ",font2)); 
 cell3.setAlignment(Paragraph.ALIGN_CENTER);
   receiptDoc.add(cell3); 
       
  Paragraph receiptlabel3=new Paragraph("VALID FROM: "+validfromTxt.getText()+"    TO: "+toTxt.getText(),font2);
                receiptlabel3.setAlignment(Paragraph.ALIGN_CENTER); receiptDoc.add(receiptlabel3);
     //receiptDoc.add(separatorlable3); 
     receiptDoc.add(space); //receiptDoc.add(space);
                  
      colswidth = new float[]{2f,6f,7f,6f,10f  };
       subjreportTable=new  com.itextpdf.text.pdf.PdfPTable(colswidth);
          subjreportTable .setWidthPercentage(90);  
 
           Paragraph Paras=new Paragraph("No",font2);
            Paras.getFont().setStyle(Font.BOLD);
            
            Paragraph Paras1=new Paragraph("Model",font2);
            Paras1.getFont().setStyle(Font.BOLD);
            
            Paragraph Paras2=new Paragraph("Description",font2);
            Paras2.getFont().setStyle(Font.BOLD);
            
            Paragraph Paras21=new Paragraph("Serial No.",font2);
            Paras21.getFont().setStyle(Font.BOLD);
            
            Paragraph Paras33=new Paragraph("Location",font2);
            Paras33.getFont().setStyle(Font.BOLD);
           
          
           subjreportTable.addCell(Paras);subjreportTable.addCell(Paras1);subjreportTable.addCell(Paras2);
            subjreportTable.addCell(Paras21);   subjreportTable.addCell(Paras33); 
   
            String model, description,serial,  location ;
            int n=equipTable.getRowCount();
            for(int z=0;z<n;z++){
                
                model= String.valueOf(equipTable.getValueAt(z , 3));
                description=String.valueOf(equipTable.getValueAt(z ,4));
                serial=String.valueOf(equipTable.getValueAt(z ,5));
                location= (String.valueOf(equipTable.getValueAt(z, 6)));
               
              Paragraph Paras11=new Paragraph(String.valueOf(z+1),font5);
                Paras11.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras211=new Paragraph(model,font5);
                Paras211.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras2111=new Paragraph(description,font5);
                Paras2111.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras331=new Paragraph(serial,font5);
                Paras331.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras341=new Paragraph(location,font5);
                Paras341.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                 subjreportTable.addCell(Paras11);subjreportTable.addCell(Paras211);
                subjreportTable.addCell(Paras2111);   subjreportTable.addCell(Paras331);subjreportTable.addCell(Paras341);
             }
             
   PdfPCell cell5=new PdfPCell(new Phrase("  " ,font5));cell5.setBorder(Rectangle.NO_BORDER);  
   subjreportTable.addCell(cell5);  subjreportTable.addCell(cell5);  subjreportTable.addCell(cell5);  subjreportTable.addCell(cell5); 
    subjreportTable.addCell(cell5);   
      
     receiptDoc.add( subjreportTable);
     receiptDoc.add( space);
     
    float[] colswidth6=new float[]{18f,10f,40f};     
 PdfPTable signatureTable=new PdfPTable(colswidth6);
 signatureTable.setWidthPercentage(108); 
 signatureTable.setHorizontalAlignment(Element.ALIGN_LEFT);  

 /*
    Paragraph sign1=new Paragraph("Staff Signature:________________________" ,font4);
   sign1.setAlignment(Paragraph.ALIGN_LEFT);
    PdfPCell cell23=new PdfPCell(sign1);cell23.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell23); 
   
     Paragraph sign2=new Paragraph(" Date:__________________" ,font4);
     sign2.setAlignment(Paragraph.ALIGN_LEFT);
    PdfPCell cell24=new PdfPCell(sign2);cell24.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell24); */
   
   /* PdfPCell cell29=new PdfPCell(new Phrase(" "));cell29.setBorder(Rectangle.NO_BORDER); 
   signatureTable.addCell(cell29);*/ 
   
   Paragraph sign3=new Paragraph("F.S.M Signature:________________________" ,font4);
   sign3.setAlignment(Paragraph.ALIGN_LEFT);
    PdfPCell cell25=new PdfPCell(sign3);cell25.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell25); 
   
     Paragraph sign4=new Paragraph(" Date:__________________" ,font4);
     sign4.setAlignment(Paragraph.ALIGN_LEFT);
      PdfPCell cell89=new PdfPCell(sign4);cell89.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell89);
     

  Paragraph sign5=new Paragraph("G.M Signature:________________________ Date:__________________" ,font4);
   sign5.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell27=new PdfPCell(sign5);cell27.setBorder(Rectangle.NO_BORDER);
    signatureTable.addCell(cell27); 
    
   receiptDoc.add(signatureTable);  receiptDoc.add(space);
  
            Paragraph user=new Paragraph("Printed By: "+currentuser,font4);
            user.setAlignment(Paragraph.ALIGN_RIGHT);
            receiptDoc.add(user);
            receiptDoc.close();
            
            
        }   catch (SQLException | DocumentException | FileNotFoundException ex) {
            Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Executable.openDocument(directory);
        
    }   catch (IOException ex) {
              Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
          }
          
          }
 
 }
 
 }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void searchserialTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchserialTxtKeyReleased
     getEquipment();
    }//GEN-LAST:event_searchserialTxtKeyReleased

    private void searchserialTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchserialTxtMouseClicked
     searchserialTxt.setText(null); 
    }//GEN-LAST:event_searchserialTxtMouseClicked
public void getContracts(){
     try {
            String getcontractsql="SELECT CONTRACTS.CONTRACT_NO, CONTRACTS.CONT_DESCRIP, CONTRACTS.CLIENT_NO,CLIENTS.CLIENTNAME,"
                    + "CONTRACTS.START,CONTRACTS.END FROM CONTRACTS " +
" LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO WHERE  CONTRACTS.CONTRACT_NO like " +
" '"+ contractnoTxt.getText()+"%' ORDER BY CLIENTS.CLIENTNAME ASC";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
            ResultSet rst=pst.executeQuery(); int i=0;
       
            while(rst.next()){
 contractnum=rst.getString(1);
 clientnameTxt.setText(rst.getString(4)); 
 descriptionTxt.setText(rst.getString(2));
 validfromTxt.setText(sdf.format(rst.getDate(5))); 
toTxt.setText(sdf.format(rst.getDate(6))); 
                i++;  
            }
            if(i<1){
   contractnum=null;
 clientnameTxt.setText(null); 
 descriptionTxt.setText(null);
 validfromTxt.setText(null); 
toTxt.setText(null);          
            }
  int rows=equipTable.getRowCount();
  for(int b=0;b<rows;b++){
  equiptableModel.removeRow(0);
  }
 String getequipment="SELECT MODEL,DESCRIPTION,SERIAL_NO,LOCATION, CONTRACT_NO FROM EQUIPMENT WHERE CONTRACT_NO LIKE '"+ contractnoTxt.getText()+"%'"; 
  PreparedStatement pst3=(PreparedStatement)connectDb.prepareStatement(getequipment);
            ResultSet rst3=pst3.executeQuery(); int j=0;
  while(rst3.next()){
  equiptableModel.addRow(new Object[]{false,j+1,rst3.getString(5),rst3.getString(1),rst3.getString(2),rst3.getString(3),rst3.getString(4)});
 j++; }           
   //equiptableModel.addRow(new Object[]{false,j+1,"","","",""});         
        } catch (SQLException ex) {
            Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
        }
   } 
    
    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton EQUIPSAVE;
    private javax.swing.JTextField clientnameTxt;
    private javax.swing.JPanel contractdetailPanel;
    private javax.swing.JTextField contractnoTxt;
    private javax.swing.JButton deletebtn;
    private javax.swing.JTextField descriptionTxt;
    public javax.swing.JTable equipTable;
    public javax.swing.JPanel equipmentPanel;
    private javax.swing.JPanel holderPanel;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField searchserialTxt;
    private javax.swing.JTextField toTxt;
    private javax.swing.JTextField validfromTxt;
    // End of variables declaration//GEN-END:variables
}
