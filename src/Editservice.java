
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.tools.Executable;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.SpinnerDateModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author JOE
 */
public class Editservice extends javax.swing.JFrame {
  String technician,dbserialno,staff,usertype;int techindex;
       String staffname,selectedtown,currentuser;
       java.sql.Date servicedate1;
   Document  receiptDoc; Image companylogo;
   String[] cols ={"NO.","STAFF NO","TECHNICIAN"};

 DefaultTableModel   techtableModel=new DefaultTableModel(cols ,0){
   @Override
   public boolean isCellEditable(int row,int column){
        return column == 0;
   }
    };
Home access=new Home();  String callnumber;
 DefaultComboBoxModel  descriptioncomboModel=new DefaultComboBoxModel();
DefaultComboBoxModel clientcomboModel=new DefaultComboBoxModel();
DefaultComboBoxModel clientcomboModel1=new DefaultComboBoxModel();
DefaultComboBoxModel contractcomboModel1 =new DefaultComboBoxModel();
 DefaultComboBoxModel technamecomboModel=new DefaultComboBoxModel();
DefaultComboBoxModel towncomboboxModel=new DefaultComboBoxModel();

DefaultComboBoxModel equipcomboModel=new DefaultComboBoxModel();
DefaultComboBoxModel serialcomboModel=new DefaultComboBoxModel();
String selectedserialno; String directory;
SimpleDateFormat sdf=new SimpleDateFormat("dd MMM,yyyy");
   int starthour, endhour;  int startMinute, endMinute;
    String serviceDate,    status,client; Date calldate; String existcallno;
  DecimalFormat df1=new DecimalFormat("#,###.00");     String  selectedcall; String transport,descrip;
   String callstatus=""; String service_no,town,currentowner;
 String[] cols3={"","No.","CALL NO","SERVICE NO","SERVICE DATE","FROM","TO","CLIENT","EQUIP. MODEL","SERIAL","LOCATION","TOWN","FAULT","ACTION","STATUS","DONE BY","CLAIM STATE"};
  DefaultTableModel servicerectableModel=new DefaultTableModel(cols3,0){
   @Override
   public boolean isCellEditable(int row,int column){
        return column == 0;
   }
    };

    public Editservice() {
        initComponents();
    towncomboboxModel.addElement("--Select Town--");
     servicerecTable.getTableHeader().setReorderingAllowed(false);
           servicerecTable.getColumnModel().getColumn(0).setPreferredWidth(2);

  techTable.getColumnModel().getColumn(0).setPreferredWidth(1);
   techTable.getColumnModel().getColumn(1).setPreferredWidth(3);
   
         TableColumn tc =servicerecTable.getColumnModel().getColumn(0);
     tc.setCellEditor(servicerecTable.getDefaultEditor(Boolean.class));
     tc.setCellRenderer(servicerecTable.getDefaultRenderer(Boolean.class));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editserviceholderPanel = new javax.swing.JPanel();
        editservicePanel = new javax.swing.JPanel();
        servicerecordPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        servicerecTable = new javax.swing.JTable();
        callsearchTxt = new javax.swing.JTextField();
        unlockclaimPanel = new javax.swing.JPanel();
        unlockholderPanel = new javax.swing.JPanel();
        searchstaffnameTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        callnoTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        servicenoTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        techTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        calldateTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        clientnameTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        actiontakentxtArea = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        starthourCombo = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        startMinspinner = new javax.swing.JSpinner(new SpinnerDateModel());
        endhourCombo = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        endMinspinner = new javax.swing.JSpinner();
        locationTxt = new javax.swing.JTextField();
        equipmodelTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        equipdescriptionTxt = new javax.swing.JTextField();
        servicedatePanel = new javax.swing.JPanel();
        servicedateTxt = new javax.swing.JTextField();
        servicedatePicker = new org.jdesktop.swingx.JXDatePicker();
        savebtnholderPanel = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        townComboBox = new javax.swing.JComboBox<>();
        adminsaveBtn = new javax.swing.JButton();
        adminsaveBtn1 = new javax.swing.JButton();
        serialnoTxt = new javax.swing.JTextField();
        townTxt = new javax.swing.JTextField();
        servicestatusTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        editserviceholderPanel.setBackground(new java.awt.Color(153, 0, 153));
        editserviceholderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Edit Service", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        editservicePanel.setBackground(new java.awt.Color(255, 255, 255));

        servicerecordPanel.setBackground(new java.awt.Color(255, 255, 255));
        servicerecordPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Service Records", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 14), new java.awt.Color(204, 0, 204))); // NOI18N

        servicerecTable.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        servicerecTable.setModel(servicerectableModel);
        servicerecTable.setFillsViewportHeight(true);
        servicerecTable.setGridColor(new java.awt.Color(153, 0, 153));
        servicerecTable.setRowHeight(25);
        servicerecTable.setRowMargin(2);
        servicerecTable.setSelectionBackground(new java.awt.Color(204, 0, 204));
        servicerecTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                servicerecTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(servicerecTable);

        callsearchTxt.setText("Search Call Number");
        callsearchTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                callsearchTxtMouseClicked(evt);
            }
        });
        callsearchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                callsearchTxtKeyReleased(evt);
            }
        });

        unlockclaimPanel.setBackground(new java.awt.Color(255, 255, 255));
        unlockclaimPanel.setLayout(new java.awt.CardLayout());

        unlockholderPanel.setBackground(new java.awt.Color(255, 255, 255));

        searchstaffnameTxt.setText("Search Staff Name");
        searchstaffnameTxt.setToolTipText("ENTER TECHNICIAN NAME");
        searchstaffnameTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchstaffnameTxtMouseClicked(evt);
            }
        });
        searchstaffnameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchstaffnameTxtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout unlockholderPanelLayout = new javax.swing.GroupLayout(unlockholderPanel);
        unlockholderPanel.setLayout(unlockholderPanelLayout);
        unlockholderPanelLayout.setHorizontalGroup(
            unlockholderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unlockholderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchstaffnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        unlockholderPanelLayout.setVerticalGroup(
            unlockholderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unlockholderPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(searchstaffnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        unlockclaimPanel.add(unlockholderPanel, "card2");

        jButton1.setText("PRINT REPORT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout servicerecordPanelLayout = new javax.swing.GroupLayout(servicerecordPanel);
        servicerecordPanel.setLayout(servicerecordPanelLayout);
        servicerecordPanelLayout.setHorizontalGroup(
            servicerecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servicerecordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(servicerecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(servicerecordPanelLayout.createSequentialGroup()
                        .addComponent(unlockclaimPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(callsearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        servicerecordPanelLayout.setVerticalGroup(
            servicerecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, servicerecordPanelLayout.createSequentialGroup()
                .addGroup(servicerecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(servicerecordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(callsearchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(unlockclaimPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Call Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 153))); // NOI18N

        jLabel1.setText("Call Number:");

        callnoTxt.setText("Enter Call Number");
        callnoTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                callnoTxtMouseClicked(evt);
            }
        });
        callnoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callnoTxtActionPerformed(evt);
            }
        });
        callnoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                callnoTxtKeyReleased(evt);
            }
        });

        jLabel2.setText("Service No:");

        servicenoTxt.setEditable(false);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Call Assigned To ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 204))); // NOI18N

        techTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        techTable.setModel(techtableModel);
        techTable.setFillsViewportHeight(true);
        techTable.setGridColor(new java.awt.Color(153, 0, 153));
        techTable.setRowHeight(25);
        techTable.setRowMargin(2);
        techTable.setSelectionBackground(new java.awt.Color(153, 0, 153));
        techTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                techTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(techTable);

        jLabel3.setText("Call Date:");

        calldateTxt.setEditable(false);

        jLabel4.setText("Client:");

        clientnameTxt.setEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(callnoTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(servicenoTxt))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(24, 24, 24)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calldateTxt)
                                    .addComponent(clientnameTxt))))))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(callnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(calldateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(clientnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(servicenoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SERVICE DETAILS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 51, 255))); // NOI18N
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
        });

        jLabel7.setText("SERVICE DATE:");

        jLabel8.setText("FROM:");

        jLabel9.setText("TO:");

        jLabel10.setText("LOCATION");

        jLabel12.setText("ACTION TAKEN:");

        actiontakentxtArea.setColumns(20);
        actiontakentxtArea.setRows(5);
        jScrollPane2.setViewportView(actiontakentxtArea);

        jLabel13.setText("EQUIPMENT MODEL:");

        jLabel14.setText("SERIAL NO:");

        jLabel15.setText("STATUS:");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-SELECT STATUS-", "CLOSED", "TO CONTINUE", "AWAITING PARTS", "NO ACCESS ", "NO WORKWORK" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        starthourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
        starthourCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                starthourComboActionPerformed(evt);
            }
        });

        jLabel16.setText(":");

        startMinspinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        startMinspinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startMinspinnerStateChanged(evt);
            }
        });

        endhourCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24" }));
        endhourCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endhourComboActionPerformed(evt);
            }
        });

        jLabel17.setText(":");

        endMinspinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        endMinspinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                endMinspinnerStateChanged(evt);
            }
        });

        jLabel11.setText("DESCRIPTION:");

        servicedatePanel.setBackground(new java.awt.Color(255, 255, 255));

        servicedateTxt.setEditable(false);

        servicedatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicedatePickerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout servicedatePanelLayout = new javax.swing.GroupLayout(servicedatePanel);
        servicedatePanel.setLayout(servicedatePanelLayout);
        servicedatePanelLayout.setHorizontalGroup(
            servicedatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servicedatePanelLayout.createSequentialGroup()
                .addComponent(servicedateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(servicedatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        servicedatePanelLayout.setVerticalGroup(
            servicedatePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(servicedateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(servicedatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        savebtnholderPanel.setLayout(new java.awt.CardLayout());

        jLabel26.setText("TOWN:");

        townComboBox.setModel(towncomboboxModel);
        townComboBox.setToolTipText("SELECT SERVICE TOWN FOR MILEAGE PURPOSE");
        townComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                townComboBoxMouseEntered(evt);
            }
        });
        townComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                townComboBoxActionPerformed(evt);
            }
        });

        adminsaveBtn.setText("Edit");
        adminsaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminsaveBtnActionPerformed(evt);
            }
        });

        adminsaveBtn1.setText("Delete");
        adminsaveBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminsaveBtn1ActionPerformed(evt);
            }
        });

        serialnoTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                serialnoTxtMouseExited(evt);
            }
        });
        serialnoTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                serialnoTxtKeyReleased(evt);
            }
        });

        townTxt.setEditable(false);

        servicestatusTxt.setEditable(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(20, 20, 20)
                        .addComponent(servicedatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(starthourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(startMinspinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(endhourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(endMinspinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(16, 16, 16)
                                .addComponent(equipdescriptionTxt))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(equipmodelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)
                            .addComponent(adminsaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adminsaveBtn1)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.LEADING, 0, 1, Short.MAX_VALUE)
                                    .addComponent(townComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, 82, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(townTxt)
                                    .addComponent(servicestatusTxt))))))
                .addGap(25, 25, 25))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(589, 589, 589)
                        .addComponent(savebtnholderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(serialnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(401, 401, 401)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel13)
                        .addComponent(equipmodelTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel8)
                    .addComponent(servicedatePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(startMinspinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(endhourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel17)
                        .addComponent(endMinspinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(starthourCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(equipdescriptionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(locationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(serialnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(townComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26)
                                    .addComponent(townTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(servicestatusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adminsaveBtn)
                            .addComponent(adminsaveBtn1))
                        .addGap(104, 104, 104)
                        .addComponent(savebtnholderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout editservicePanelLayout = new javax.swing.GroupLayout(editservicePanel);
        editservicePanel.setLayout(editservicePanelLayout);
        editservicePanelLayout.setHorizontalGroup(
            editservicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(editservicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editservicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editservicePanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(servicerecordPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        editservicePanelLayout.setVerticalGroup(
            editservicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editservicePanelLayout.createSequentialGroup()
                .addGroup(editservicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 286, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(servicerecordPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout editserviceholderPanelLayout = new javax.swing.GroupLayout(editserviceholderPanel);
        editserviceholderPanel.setLayout(editserviceholderPanelLayout);
        editserviceholderPanelLayout.setHorizontalGroup(
            editserviceholderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editserviceholderPanelLayout.createSequentialGroup()
                .addComponent(editservicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );
        editserviceholderPanelLayout.setVerticalGroup(
            editserviceholderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editserviceholderPanelLayout.createSequentialGroup()
                .addComponent(editservicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(editserviceholderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editserviceholderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void servicerecTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_servicerecTableMouseClicked
callnoTxt.setText("Enter Call Number");
        int clickedcolumn=servicerecTable.getSelectedColumn();

        if(clickedcolumn==0)
        {}
        else{
            try {
 Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
  int row=servicerecTable.getSelectedRow();
  service_no=String.valueOf(servicerectableModel.getValueAt(row, 3));

  town=String.valueOf(servicerectableModel.getValueAt(row, 11));

   String selectedtech=String.valueOf(servicerectableModel.getValueAt(row, 15));
 if(usertype.equalsIgnoreCase("ADMINISTRATOR"))
  {
 String getstaffno="SELECT STAFFNO FROM STAFF WHERE STAFFNAME='"+selectedtech+"'";
  PreparedStatement pst2=(PreparedStatement)connectDb.prepareStatement(getstaffno);
  ResultSet rst=pst2.executeQuery(); String dateclaimed=""; int u=0;String claimstatus="";
                    while(rst.next()){
  currentowner=rst.getString(1);
                        u++;
                    }
                }
  System.out.println("Staff no "+currentowner);

  callnumber=String.valueOf(servicerectableModel.getValueAt(row, 1)); String status="";
   String checkclaimsql="SELECT SERVICE_NO,STATUS, DATE_CLAIMED FROM CLAIMS WHERE SERVICE_NO='"+service_no+"'";
 PreparedStatement pst2=(PreparedStatement)connectDb.prepareStatement(checkclaimsql);
 ResultSet rst=pst2.executeQuery(); String dateclaimed=""; int u=0;String claimstatus="";
                while(rst.next()){
                    status=rst.getString(2);
                    u++;
                }

   if((status.equalsIgnoreCase("CLAIMED")&& usertype.equalsIgnoreCase("USER"))){
 JOptionPane.showMessageDialog(null," Claim for this Service already created. Claim must be unlocked first to edit! ","Restricted Access",JOptionPane.ERROR_MESSAGE);
  clearTxt();
   }
 else{
 getService();
    }
            }
 catch (SQLException ex) {
  Logger.getLogger(Createmileage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_servicerecTableMouseClicked

    private void callsearchTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_callsearchTxtMouseClicked
callnoTxt.setText("Enter Call Number");        searchstaffnameTxt.setText("Search Staff Name");       callsearchTxt.setText(null);
    }//GEN-LAST:event_callsearchTxtMouseClicked

    private void callsearchTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_callsearchTxtKeyReleased
         getServiceRecords();
    }//GEN-LAST:event_callsearchTxtKeyReleased

    private void searchstaffnameTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchstaffnameTxtMouseClicked
callnoTxt.setText("Enter Call Number");          callsearchTxt.setText("Search Call Number");    searchstaffnameTxt.setText(null);
    }//GEN-LAST:event_searchstaffnameTxtMouseClicked

    private void searchstaffnameTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchstaffnameTxtKeyReleased
         getServiceRecords();
    }//GEN-LAST:event_searchstaffnameTxtKeyReleased
public void  getService(){

      try {
  String getcallssql;   String SERVno="";   String staffname2;
  int row=servicerecTable.getSelectedRow();

if(callnoTxt.getText().isEmpty()||callnoTxt.getText().equalsIgnoreCase("Enter Call Number")){
SERVno=String.valueOf(servicerecTable.getValueAt(row,3));
 staffname2=String.valueOf(servicerecTable.getValueAt(row, 15));
 }

  if(!callnoTxt.getText().isEmpty()&&!callnoTxt.getText().equalsIgnoreCase("Enter Call Number")){
  getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO,SERVICE.EQUIP_MODEL,SERVICE.SERIAL,"
                  + "SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS, CLIENTS.CLIENTNAME,CLAIMS.STATUS,SERVICE.TOWN,SERVICE.EQUIP_DESCRIP FROM CALLS "
                  + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                  + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
                  + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
                  + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
                  + "WHERE CALLS.CALL_NO ='"+callnoTxt.getText()+"'"
                  + " ORDER BY SERVICE.SERVICE_DATE DESC";
  }
  else{
   getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO,SERVICE.EQUIP_MODEL,SERVICE.SERIAL,"
                  + "SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS, CLIENTS.CLIENTNAME,CLAIMS.STATUS,SERVICE.TOWN,SERVICE.EQUIP_DESCRIP FROM CALLS "
                  + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                  + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
                  + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
                  + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
                  + "WHERE SERVICE.SERVICE_NO = '"+SERVno+"'"
                  + " ORDER BY SERVICE.SERVICE_DATE DESC";
  }
 Connection connectDb=(Connection)DriverManager.getConnection( access.server,   access.username,  access.dbpword);
 PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcallssql);
 ResultSet rst=pst.executeQuery(); int i=0;   String technsql;
          while(rst.next()){
              java.sql.Date date1=      rst.getDate(3);
              if(date1==null){
  }else{

if(callnoTxt.getText().isEmpty()||callnoTxt.getText().equalsIgnoreCase("Enter Call Number")){
 callnoTxt.setText(rst.getString(1));
 }

  servicenoTxt.setText(rst.getString(2));
 servicedateTxt.setText(sdf.format(rst.getDate(3)));
 serialnoTxt.setText(rst.getString(8));
 equipdescriptionTxt.setText(rst.getString(16));
 actiontakentxtArea.setText(rst.getString(11));
  equipmodelTxt.setText(rst.getString(7));
locationTxt.setText(rst.getString(9));
   townTxt .setText(rst.getString(15));
   servicestatusTxt.setText(rst.getString(12));

  technsql="SELECT STAFF.STAFFNO, STAFF.STAFFNAME, CALLS.TECHNICIAN FROM STAFF "
           + "LEFT JOIN CALLS ON STAFF.STAFFNO=CALLS.TECHNICIAN WHERE CALLS.CALL_NO='"+rst.getString(1)+"' ORDER BY STAFFNAME ASC";
 PreparedStatement pst2=(PreparedStatement)connectDb.prepareStatement(technsql);
 ResultSet rst2=pst2.executeQuery(); int g=0;
 int f=techTable.getRowCount();
 for(int h=0;h<f;h++){
 techtableModel.removeRow(0);
 }
   while(rst2.next()){
     techtableModel.addRow(new Object[]{g+1,rst2.getString(1),rst2.getString(2)});
 g++;  }

              }
         i++;
          }
 if(i<1){
 servicenoTxt.setText(null);
 servicedateTxt.setText(null);
 serialnoTxt.setText(null);
 equipdescriptionTxt.setText(null);
 actiontakentxtArea.setText(null);
  equipmodelTxt.setText(null);
locationTxt.setText(null);
   townTxt .setText(null);
   servicestatusTxt.setText(null);
   int f=techTable.getRowCount();
 for(int h=0;h<f;h++){
 techtableModel.removeRow(0);
 }
 }
      } catch (SQLException ex) {
          Logger.getLogger(Editservice.class.getName()).log(Level.SEVERE, null, ex);
      }
}

  public void getServiceRecords(){

    int g=servicerecTable.getRowCount();
    for(int f=0;f<g;f++){
servicerectableModel.removeRow(0);
    }
     String getcallssql = null;
 if(!callsearchTxt.getText().equalsIgnoreCase("Search Call Number")&& !callsearchTxt.getText().isEmpty()){
  getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO, SERVICE.EQUIP_MODEL,"
          + "SERVICE.SERIAL,SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS,CLIENTS.CLIENTNAME, STAFF.STAFFNAME,CLAIMS.STATUS,SERVICE.TOWN FROM CALLS "
                    + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                    + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
             + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
            + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
           + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
          + "WHERE CALLS.CALL_NO ='"+callsearchTxt.getText()+"'"
         + " ORDER BY SERVICE.SERVICE_DATE DESC";
 }
 else  if(!callnoTxt.getText().equalsIgnoreCase("Enter Call Number")&& !callnoTxt.getText().isEmpty()){
  getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO, SERVICE.EQUIP_MODEL,"
          + "SERVICE.SERIAL,SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS,CLIENTS.CLIENTNAME, STAFF.STAFFNAME,CLAIMS.STATUS,SERVICE.TOWN FROM CALLS "
                    + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                    + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
             + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
            + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
           + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
          + "WHERE CALLS.CALL_NO ='"+callnoTxt.getText()+"'"
         + " ORDER BY SERVICE.SERVICE_DATE DESC";
 }
 else{
   if(usertype.equalsIgnoreCase("USER")){
  getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO, SERVICE.EQUIP_MODEL,"
          + "SERVICE.SERIAL,SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS,CLIENTS.CLIENTNAME, STAFF.STAFFNAME,CLAIMS.STATUS,SERVICE.TOWN FROM CALLS "
                    + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                    + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
             + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
            + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
           + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
          + "WHERE CALLS.TECHNICIAN ='"+currentowner+"'"
               + " ORDER BY SERVICE.SERVICE_DATE DESC";
 }
 else if(usertype.equalsIgnoreCase("ADMINISTRATOR")){

    if(!searchstaffnameTxt.getText().equalsIgnoreCase("Search Staff Name")&& !searchstaffnameTxt.getText().isEmpty()){
    getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO, SERVICE.EQUIP_MODEL,"
          + "SERVICE.SERIAL,SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS,CLIENTS.CLIENTNAME, STAFF.STAFFNAME,CLAIMS.STATUS,SERVICE.TOWN  FROM CALLS "
                    + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                    + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
             + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
            + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
             + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
            + "where STAFF.STAFFNAME LIKE '"+searchstaffnameTxt.getText()+"%'"
           + " ORDER BY SERVICE.SERVICE_DATE DESC";

    }
    else{
     getcallssql="SELECT CALLS.CALL_NO,SERVICE.SERVICE_NO,SERVICE.SERVICE_DATE,SERVICE.FROM2,SERVICE.TO2,CONTRACTS.CONTRACT_NO, SERVICE.EQUIP_MODEL,"
          + "SERVICE.SERIAL,SERVICE.LOCATION,CALLS.TO_DO,SERVICE.ACTION,SERVICE.STATUS,CLIENTS.CLIENTNAME, STAFF.STAFFNAME,CLAIMS.STATUS,SERVICE.TOWN  FROM CALLS "
                    + "LEFT JOIN SERVICE ON CALLS.CALL_NO = SERVICE.CALL_NO "
                    + " LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
             + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
            + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
             + "LEFT JOIN CLAIMS ON SERVICE.SERVICE_NO=CLAIMS.SERVICE_NO "
           + " ORDER BY SERVICE.SERVICE_DATE DESC";
    }
 }
 }
  System.out.println("Technician logged in :"+currentowner);
 try {

    Connection connectDb=(Connection)DriverManager.getConnection( access.server,   access.username,  access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcallssql);
            ResultSet rst=pst.executeQuery(); int i=0;
             while(rst.next()){
 java.sql.Date date1=      rst.getDate(3);
 if(date1==null){

 }else{
 servicerectableModel.addRow(new Object[]{false,i+1,rst.getString(1),rst.getString(2),sdf.format(rst.getDate(3)),rst.getString(4),rst.getString(5),rst.getString( 13)
  ,rst.getString(7),rst.getString(8),rst.getString(9),rst.getString(16),rst.getString(10),rst.getString(11),rst.getString(12),rst.getString(14),rst.getString(15)});
 }




  i++;
            }
             if(i<1){
//JOptionPane.showMessageDialog(null,"no record found" );
             }
        } catch (SQLException ex) {
            Logger.getLogger(Userprofile.class.getName()).log(Level.SEVERE, null, ex);
        }


  }


    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        status=""+ jComboBox2.getSelectedItem();
        if(status.equalsIgnoreCase("select status")){status=null;}
        else{
        servicestatusTxt.setText(status);
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void starthourComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_starthourComboActionPerformed
        starthour=Integer.parseInt(""+starthourCombo.getSelectedItem());
    }//GEN-LAST:event_starthourComboActionPerformed

    private void startMinspinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startMinspinnerStateChanged
        startMinute=Integer.parseInt(""+startMinspinner.getModel().getValue());
    }//GEN-LAST:event_startMinspinnerStateChanged

    private void endhourComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endhourComboActionPerformed
        endhour=Integer.parseInt(""+endhourCombo.getSelectedItem());
    }//GEN-LAST:event_endhourComboActionPerformed

    private void endMinspinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_endMinspinnerStateChanged
        endMinute=Integer.parseInt(""+endMinspinner.getModel().getValue());
    }//GEN-LAST:event_endMinspinnerStateChanged

    private void serialnoTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_serialnoTxtMouseExited
        if(dbserialno!=null){
            serialnoTxt.setText(dbserialno);
        }

    }//GEN-LAST:event_serialnoTxtMouseExited

    private void serialnoTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_serialnoTxtKeyReleased
        selectedserialno=serialnoTxt.getText();
        try {
            String getcontractsql="SELECT SERIAL_NO, MODEL,LOCATION,DESCRIPTION FROM EQUIPMENT where SERIAL_NO LIKE '"+selectedserialno+"%' ";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
            ResultSet rst=pst.executeQuery(); int i=0;
            while(rst.next()){
                dbserialno=rst.getString("SERIAL_NO");
                equipdescriptionTxt.setText(rst.getString("DESCRIPTION"));
                locationTxt.setText(rst.getString("LOCATION"));
                equipmodelTxt.setText(rst.getString("model"));
                i++;
            }
            if(i<1){
                dbserialno=null;
                equipdescriptionTxt.setText(null);
                locationTxt.setText(null);
                equipmodelTxt.setText(null);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_serialnoTxtKeyReleased

    private void servicedatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicedatePickerActionPerformed
        servicedate1= new java.sql.Date(servicedatePicker.getDate().getTime());
         servicedateTxt.setText(sdf.format(servicedate1));
    }//GEN-LAST:event_servicedatePickerActionPerformed

    private void adminsaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminsaveBtnActionPerformed
   editService();
    }//GEN-LAST:event_adminsaveBtnActionPerformed

    private void townComboBoxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_townComboBoxMouseEntered
     getTowns();
    }//GEN-LAST:event_townComboBoxMouseEntered

    private void townComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_townComboBoxActionPerformed
        selectedtown=""+townComboBox.getSelectedItem();
        if(!selectedtown.equalsIgnoreCase("-Select Town-")){
        townTxt.setText(selectedtown); 
        }
    }//GEN-LAST:event_townComboBoxActionPerformed

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
    LocalDate todaydate=LocalDate.now();
  String  callreqDate=(DateTimeFormatter.ofPattern("dd MMM,yyyy").format(todaydate));
       // servicedateTxt.setText(callreqDate);
    }//GEN-LAST:event_jPanel4MouseEntered

    private void adminsaveBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminsaveBtn1ActionPerformed
    TableModel model1=servicerecTable.getModel(); String delselectedColumns1=null;
    String claimstatus,serviceno;
      for(int i=0; i<model1.getRowCount();i++){
       if((Boolean) model1.getValueAt(i,0)){
     delselectedColumns1=servicerecTable.getModel().getValueAt(i,0).toString();
       }
     }
          Connection connectDb;         PreparedStatement  pstdel;
        if(delselectedColumns1==null){
   int g=servicerecTable.getRowCount();
   if(g<1){
   int choice2=JOptionPane.showConfirmDialog(rootPane, "Call number "+callnoTxt.getText()+" does not have service entries. Do you want to delete it?","Confirm",JOptionPane.YES_NO_OPTION);
  if(choice2==JOptionPane.YES_OPTION){
       try {
           connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
           String   unlockclaimsql="DELETE FROM CALLS WHERE CALL_NO='"+callnoTxt.getText()+"' ";
           pstdel=(PreparedStatement)connectDb.prepareStatement(unlockclaimsql);
       int f=    pstdel.executeUpdate();
    if(f>0){
    JOptionPane.showMessageDialog(null, "Call number "+callnoTxt.getText()+" deleted successfully!","Successful",JOptionPane.INFORMATION_MESSAGE);
   callnoTxt.setText(null); calldateTxt.setText(null);  clientnameTxt.setText(null);  servicenoTxt.setText(null); 
    int t=techTable.getRowCount();
 for(int h=0;h<t;h++){
 techtableModel.removeRow(0);
 }
    }       
       } catch (SQLException ex) {
           Logger.getLogger(Editservice.class.getName()).log(Level.SEVERE, null, ex);
       }
  }
   }
   else{
  JOptionPane.showMessageDialog(rootPane,"Please select at least one service record from the service records below !","No Selection",JOptionPane.WARNING_MESSAGE);
  } }
        else{
     int choice=JOptionPane.showConfirmDialog(rootPane, "Do you want to delete selected service record(s) ?","Confirm",JOptionPane.YES_NO_OPTION);
           if(choice==JOptionPane.YES_OPTION){

                int k=0;
    TableModel model2=servicerecTable.getModel();  String unlockclaimsql;
    String deletecall,callno;
    for(int i=0; i<model2.getRowCount();i++){
     if((Boolean) model2.getValueAt(i,0)){
  claimstatus=servicerecTable.getModel().getValueAt(i,16).toString();
 serviceno=  servicerecTable.getModel().getValueAt(i,3).toString();
callno=  servicerecTable.getModel().getValueAt(i,2).toString();
  if(claimstatus.equalsIgnoreCase("CLAIMED")){
//JOptionPane.showMessageDialog(null, "This service has a mileage claim. Unlock to delete!","Service Claimed",JOptionPane.WARNING_MESSAGE);
  }
  else{
           try {
     connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
               unlockclaimsql="DELETE FROM CLAIMS   WHERE  CALL_NO='"+serviceno+"' ";
               pstdel=(PreparedStatement)connectDb.prepareStatement(unlockclaimsql);
            pstdel.executeUpdate();

      unlockclaimsql="DELETE FROM SERVICE WHERE CALL_NO='"+serviceno+"' ";
               pstdel=(PreparedStatement)connectDb.prepareStatement(unlockclaimsql);
           pstdel.executeUpdate();

        unlockclaimsql="DELETE FROM CALLS WHERE CALL_NO='"+callno+"' ";
               pstdel=(PreparedStatement)connectDb.prepareStatement(unlockclaimsql);
               k= pstdel.executeUpdate();

         } catch (SQLException ex) {
               Logger.getLogger(Editservice.class.getName()).log(Level.SEVERE, null, ex);
           }
  }

   }
    }
   if(k>0){
        getServiceRecords();
  JOptionPane.showMessageDialog(rootPane, "Selected service records deleted successfully !","Success",JOptionPane.INFORMATION_MESSAGE);
  clearTxt();
   }
   else{
   JOptionPane.showMessageDialog(null, "Note that claimed services cannot be deleted. Unlock claims to delete service!","Not Allowed",JOptionPane.WARNING_MESSAGE);
   }
           }
        }
    }//GEN-LAST:event_adminsaveBtn1ActionPerformed

    private void techTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_techTableMouseClicked
        int rows=techTable.getRowCount();
        if(rows>0){
            int choice=JOptionPane.showConfirmDialog(null, "Remove selected technician?","Confirm",JOptionPane.YES_NO_OPTION);
            if(choice==JOptionPane.YES_OPTION){
           technamecomboModel.addElement(techTable.getValueAt(techTable.getSelectedRow(), 2));
                techtableModel.removeRow(techTable.getSelectedRow());
            }
        }

    }//GEN-LAST:event_techTableMouseClicked

    private void callnoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callnoTxtActionPerformed

    }//GEN-LAST:event_callnoTxtActionPerformed

    private void callnoTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_callnoTxtMouseClicked
    searchstaffnameTxt.setText("Search Staff Name");
callsearchTxt.setText("Search Call Number"); callnoTxt.setText(null);
    }//GEN-LAST:event_callnoTxtMouseClicked

    private void callnoTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_callnoTxtKeyReleased
        getService(); getServiceRecords();
        getCall();
    }//GEN-LAST:event_callnoTxtKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       printserviceReport();
    }//GEN-LAST:event_jButton1ActionPerformed
 public void getCall(){
      try {
          String callsql="SELECT CALLS.CALL_NO, CALLS.TECHNICIAN, STAFF.STAFFNAME, CALLS.CALL_DATE,CALLS.CONTRACT_NO,CLIENTS.CLIENTNAME FROM CALLS "
                  + "LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
                  + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO"
                  + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
                  + " WHERE CALLS.CALL_NO='"+callnoTxt.getText()+"'";
          Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
          PreparedStatement  pst=(PreparedStatement)connectDb.prepareStatement(callsql);
        ResultSet rst=pst.executeQuery(); int u=0;
        while(rst.next()){
           
            java.sql.Date calldate1=new java.sql.Date(Date.valueOf(rst.getString(4)).getTime());  
       calldateTxt.setText(sdf.format(calldate1));
       clientnameTxt.setText(rst.getString(6));
       techtableModel.addRow(new Object[]{u+1,rst.getString(2),rst.getString(3)}); 
      u++;  }
        if(u<1){
    calldateTxt.setText(null);
       clientnameTxt.setText(null);
       
        }
      } catch (SQLException ex) {
          Logger.getLogger(Editservice.class.getName()).log(Level.SEVERE, null, ex);
      }
 }
    
    public void  editService(){
 if(callnoTxt.getText().isEmpty()){
 JOptionPane.showMessageDialog(null, "Please enter call number or select service record below!","Call Number Required",JOptionPane.WARNING_MESSAGE);
 }
 else if(servicenoTxt.getText().isEmpty()){
 JOptionPane.showMessageDialog(null, "Please select service record below!","Service Number Required",JOptionPane.WARNING_MESSAGE);
 }
 else{
 int choice=JOptionPane.showConfirmDialog(null, "Do you want to save changes to service record for Service Number "+servicenoTxt.getText()+"?","Confirm",JOptionPane.YES_NO_OPTION);
if(choice==JOptionPane.YES_OPTION){
     try {
         String updatesql;  Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
         PreparedStatement pst;
         
         if(servicedate1!=null&&starthour>0&&endhour>0){
             updatesql="UPDATE SERVICE SET SERVICE_DATE=?, FROM2=?, TO2=?,LOCATION=?,TOWN=?,EQUIP_DESCRIP=?,EQUIP_MODEL=?,SERIAL=?,ACTION=?,STATUS=? "
                     + " where SERVICE_NO='"+servicenoTxt.getText()+"'";
              pst=(PreparedStatement)connectDb.prepareStatement(updatesql);
      pst.setDate(1, servicedate1); 
       if(startMinute==0){
   pst.setString(2, starthour+":00"); 
  }else if(startMinute<10){
   pst.setString(2, starthour+":0"+startMinute); 
  }
  else{
   pst.setString(2, starthour+":"+startMinute); 
  }
     
  if(endMinute==0){
   pst.setString(3, endhour+":00"); 
  }else if(endMinute<10){
   pst.setString(3, endhour+":0"+endMinute); 
  }
  else{
   pst.setString(3, endhour+":"+endMinute);
  } 
  pst.setString(4, locationTxt.getText()); 
    pst.setString(5, townTxt.getText()); 
    pst.setString(6, equipdescriptionTxt.getText());   
      pst.setString(7, equipmodelTxt.getText());   
      pst.setString(8, serialnoTxt.getText());    
           pst.setString(9, actiontakentxtArea.getText());  
            pst.setString(10, servicestatusTxt.getText());        
      
         }else if(servicedate1!=null&&starthour>0){
             updatesql="UPDATE SERVICE SET SERVICE_DATE=?, FROM2=?,LOCATION=?,TOWN=?,EQUIP_DESCRIP=?,EQUIP_MODEL=?,SERIAL=?,ACTION=?,STATUS=? "
                     + " where SERVICE_NO='"+servicenoTxt.getText()+"'";
          pst=(PreparedStatement)connectDb.prepareStatement(updatesql);            
   pst.setDate(1, servicedate1); 
       if(startMinute==0){
   pst.setString(2, starthour+":00"); 
  }else if(startMinute<10){
   pst.setString(2, starthour+":0"+startMinute); 
  }
  else{
   pst.setString(2, starthour+":"+startMinute); 
  }
   pst.setString(3, locationTxt.getText()); 
    pst.setString(4, townTxt.getText()); 
   pst.setString(5, equipdescriptionTxt.getText());   
      pst.setString(6, equipmodelTxt.getText());   
      pst.setString(7, serialnoTxt.getText());    
           pst.setString(8, actiontakentxtArea.getText());  
            pst.setString(9, servicestatusTxt.getText());        
                 
         }
else if(servicedate1!=null&& endhour>0){
             updatesql="UPDATE SERVICE SET SERVICE_DATE=?,  TO2=?,LOCATION=?,TOWN=?,EQUIP_DESCRIP=?,EQUIP_MODEL=?,SERIAL=?,ACTION=?,STATUS=? "
                     + " where SERVICE_NO='"+servicenoTxt.getText()+"'";
   pst=(PreparedStatement)connectDb.prepareStatement(updatesql);      
  pst.setDate(1, servicedate1); 
 
   if(endMinute==0){
   pst.setString(2, endhour+":00"); 
  }else if(endMinute<10){
   pst.setString(2, endhour+":0"+endMinute); 
  }
  else{
   pst.setString(2, endhour+":"+endMinute);
  } 
  pst.setString(3, locationTxt.getText()); 
    pst.setString(4, townTxt.getText()); 
    pst.setString(5, equipdescriptionTxt.getText());   
      pst.setString(6, equipmodelTxt.getText());   
      pst.setString(7, serialnoTxt.getText());    
           pst.setString(8, actiontakentxtArea.getText());  
            pst.setString(9, servicestatusTxt.getText());    
}
         else if(servicedate1!=null){
             updatesql="UPDATE SERVICE SET SERVICE_DATE=?,LOCATION=?,TOWN=?,EQUIP_DESCRIP=?,EQUIP_MODEL=?,SERIAL=?,ACTION=?,STATUS=? "
                     + " where SERVICE_NO='"+servicenoTxt.getText()+"'";
    pst=(PreparedStatement)connectDb.prepareStatement(updatesql);        
   pst.setDate(1, servicedate1); 
   pst.setString(2, locationTxt.getText()); 
    pst.setString(3, townTxt.getText()); 
    pst.setString(4, equipdescriptionTxt.getText());   
      pst.setString(5, equipmodelTxt.getText());   
      pst.setString(6, serialnoTxt.getText());    
           pst.setString(7, actiontakentxtArea.getText());  
            pst.setString(8, servicestatusTxt.getText());           
         
         }
       else   if(servicedate1==null&&starthour>0&&endhour>0){
 updatesql="UPDATE SERVICE SET LOCATION=?,TOWN=?,EQUIP_DESCRIP=?,EQUIP_MODEL=?,SERIAL=?,ACTION=?,STATUS=?, FROM2=?,TO2=? "
                     + " WHERE SERVICE_NO='"+servicenoTxt.getText()+"'";
              pst=(PreparedStatement)connectDb.prepareStatement(updatesql);
  pst.setString(1, locationTxt.getText()); 
    pst.setString(2, townTxt.getText()); 
    pst.setString(3, equipdescriptionTxt.getText());   
      pst.setString(4, equipmodelTxt.getText());   
      pst.setString(5, serialnoTxt.getText());    
           pst.setString(6, actiontakentxtArea.getText());  
            pst.setString(7, servicestatusTxt.getText());        
        
            if(startMinute==0){
   pst.setString(8, starthour+":00"); 
  }else if(startMinute<10){
   pst.setString(8, starthour+":0"+startMinute); 
  }
  else{
   pst.setString(8, starthour+":"+startMinute); 
  }
     
  if(endMinute==0){
   pst.setString(9, endhour+":00"); 
  }else if(endMinute<10){
   pst.setString(9, endhour+":0"+endMinute); 
  }
  else{
   pst.setString(9, endhour+":"+endMinute);
  }  
      System.out.println("Used query: "+updatesql);
       }    
         else{
   updatesql="UPDATE SERVICE SET LOCATION=?,TOWN=?,EQUIP_DESCRIP=?,EQUIP_MODEL=?,SERIAL=?,ACTION=?,STATUS=? "
                     + " where SERVICE_NO='"+servicenoTxt.getText()+"'";
    pst=(PreparedStatement)connectDb.prepareStatement(updatesql);        
   pst.setString(1, locationTxt.getText()); 
    pst.setString(2, townTxt.getText()); 
    pst.setString(3, equipdescriptionTxt.getText());   
      pst.setString(4, equipmodelTxt.getText());   
      pst.setString(5, serialnoTxt.getText());    
           pst.setString(6, actiontakentxtArea.getText());  
            pst.setString(7, servicestatusTxt.getText());         
         } 
        
int l=pst.executeUpdate();

String updatecallsql="UPDATE CALLS SET STATUS='"+servicestatusTxt.getText()+"' WHERE CALL_NO='"+callnoTxt.getText()+"'";
 pst=(PreparedStatement)connectDb.prepareStatement(updatecallsql);
int k= pst.executeUpdate();
 
int v=techTable.getRowCount();

 
if(l>0){
    getServiceRecords();
JOptionPane.showMessageDialog(null, "Changes  to service no: "+servicenoTxt.getText()+" saved successfully!","Successful",JOptionPane.INFORMATION_MESSAGE);
clearTxt();
}
     } catch (SQLException ex) {
         Logger.getLogger(Editservice.class.getName()).log(Level.SEVERE, null, ex);
     }

}
 }
 }

 public void clearTxt(){
 locationTxt.setText(null); 
   townTxt.setText(null); 
   equipdescriptionTxt.setText(null);  
     equipmodelTxt.setText(null);  
     serialnoTxt.setText(null); 
    actiontakentxtArea.setText(null);  
     servicestatusTxt.setText(null); 
     servicenoTxt.setText(null); 
     callnoTxt.setText("Enter Call Number"); 
  int f=techTable.getRowCount();
 for(int h=0;h<f;h++){
 techtableModel.removeRow(0);
 }
 }
    public void getEquipment(){

  try {
     String getcontractsql="SELECT * FROM EQUIPMENT where CONTRACT_NO='' ORDER BY MODEL ASC";
    Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
               PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
               ResultSet rst=pst.executeQuery(); int i=0;
          serialcomboModel.removeAllElements();
               while(rst.next()){
          serialcomboModel.addElement(rst.getString("SERIAL_NO"));
                   i++;
               }} catch (SQLException ex) {
               Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
           }
 }

    public void getTowns(){
      try {
     String getcontractsql="SELECT TOWN FROM MILEAGESETTINGS GROUP BY TOWN ORDER BY TOWN ASC";
    Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
               PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
               ResultSet rst=pst.executeQuery(); int i=0;
          towncomboboxModel.removeAllElements();
           towncomboboxModel.addElement("--Select Town--");
               while(rst.next()){
          towncomboboxModel.addElement(rst.getString("town"));
                   i++;
               }} catch (SQLException ex) {
               Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
           }

    }
     public void getTechnician(){
           try {

               String technsql="SELECT STAFFNO, STAFFNAME FROM STAFF ORDER BY STAFFNAME ASC";
               Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
               PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(technsql);
               ResultSet rst=pst.executeQuery(); int i=0;
               technamecomboModel.removeAllElements();
               technamecomboModel.addElement("--Select Technician--");
               while(rst.next()){
                   technamecomboModel.addElement(rst.getString(2));
                  technician=rst.getString(1);
                  staff=rst.getString(2);
                   i++;
               }
               if(i<1){
               staff=null;
               technician=null;
               }
           } catch (SQLException ex) {
               Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
           }

 }
     
  public void printserviceReport(){
     int clickedcolumn=servicerecTable.getSelectedColumn();
     int selectedrw=servicerecTable.getSelectedRow();
   TableModel model1=servicerecTable.getModel(); String  selectedColumns1=null;
 //  for(int i=0; i<model1.getRowCount();i++)
   {
       if((Boolean) model1.getValueAt(selectedrw,0)){
    selectedColumns1=servicerecTable.getModel().getValueAt(selectedrw,0).toString();
       }
     }
     if(selectedColumns1!=null){
       try {
       Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
    {
    String callno, serviceno,servicedate,from,to,servicedclient,equipmodel,serial,location,town,fault,action,status;
    callno=String.valueOf(servicerecTable.getValueAt(selectedrw,2));
    serviceno=String.valueOf(servicerecTable.getValueAt(selectedrw, 3));
    servicedclient=String.valueOf(servicerecTable.getValueAt(selectedrw, 7));
      location=String.valueOf(servicerecTable.getValueAt(selectedrw,10));      
    FileOutputStream filename=null; 
   receiptDoc=new Document(PageSize.A4 ); 
      JFileChooser filesaver=new JFileChooser();
       filesaver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          int option=filesaver.showSaveDialog(editservicePanel); 
    
        String   dir=filesaver.getSelectedFile().toString();
          String sqllogo="SELECT LOGO FROM SETTINGS";
            com.mysql.jdbc.PreparedStatement pstlogo=(com.mysql.jdbc.PreparedStatement) connectDb.prepareStatement(sqllogo);
            ResultSet rst3=pstlogo.executeQuery();
            
            if(rst3!=null){
            while(rst3.next()){
            byte[] byt = null;
            byt=rst3.getBytes(1);
            companylogo = Toolkit.getDefaultToolkit().createImage(byt);
            }
            }
  String printdate=new SimpleDateFormat("dd MMM, yyyy").format(Calendar.getInstance().getTime()); 
  directory=dir+"/"+location+" Service Report FOR "+servicedclient+".pdf";
    filename = new FileOutputStream(directory);
   PdfWriter writer=PdfWriter.getInstance(receiptDoc ,filename);
            receiptDoc.open();
            Paragraph space=new Paragraph("          ");
            com.itextpdf.text.Font font1=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,22,Font.BOLD);
            com.itextpdf.text.Font font2=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,8,Font.BOLD);
            com.itextpdf.text.Font font3=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,18,Font.BOLD);
            com.itextpdf.text.Font font4=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.HELVETICA,8,Font.LAYOUT_LEFT_TO_RIGHT);
             com.itextpdf.text.Font font5=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.COURIER,9,Font.LAYOUT_LEFT_TO_RIGHT);
             
      com.itextpdf.text.Font font6=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.COURIER,12,Font.LAYOUT_LEFT_TO_RIGHT); 
      com.itextpdf.text.Font font7=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,12,Font.BOLD);   
          com.itextpdf.text.Font font8=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,9,Font.BOLD);      
           
            
com.itextpdf.text.Image image = com.itextpdf.text.Image.getInstance(companylogo , null); 
image.setAbsolutePosition(05, 780);
         image.scaleToFit(150,50);
 writer.getDirectContent().addImage(image);  receiptDoc.add(space);  // receiptDoc.add(space); 
  
            //Paragraph schname=new Paragraph( sacconame,font4); schname.setAlignment(Paragraph.ALIGN_CENTER);
              String separator="______________________________________________________________________________";
            Paragraph separatorlable=new Paragraph(separator,font2);
               separatorlable.setAlignment(Paragraph.ALIGN_CENTER);
              //  receiptDoc.add(separatorlable);
 String separator2="  __________________________________________________________________________________________________________________________________";
            Paragraph separatorlable3=new Paragraph(separator2,font2);
               separatorlable3.setAlignment(Paragraph.ALIGN_CENTER);
               
            Paragraph receiptlabel=new Paragraph("TECHNICAL SERVICE DEPARTMENT     ",font1);
            receiptlabel.setAlignment(Paragraph.ALIGN_CENTER);  receiptDoc.add(receiptlabel);
             receiptDoc.add(separatorlable3); 
        // receiptDoc.add(space);
         
     Paragraph receiptlabel2=new Paragraph("SERVICE REPORT",font3);
                receiptlabel2.setAlignment(Paragraph.ALIGN_CENTER);
  receiptDoc.add(receiptlabel2);      //   receiptDoc.add(separatorlable3);
 // receiptDoc.add(space);
  
   Paragraph date=new Paragraph( "DATE: "+printdate,font6);
 date.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT); 
   date.setAlignment(Paragraph.ALIGN_LEFT);
           receiptDoc.add(date);
            
   Paragraph paras1345=new Paragraph("Service No: "+serviceno,font6);
   paras1345.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT); 
 paras1345.setAlignment(Paragraph.ALIGN_LEFT);
   receiptDoc.add(paras1345); receiptDoc.add(space);
    
   float[] colswidth4=new float[]{20f,7f,15f};
   PdfPTable colstable2=new PdfPTable(colswidth4);
     colstable2 .setWidthPercentage(100);//colstable.setHorizontalAlignment();
      colstable2.setHorizontalAlignment(Element.ALIGN_CENTER);  
   
 Paragraph paras102=new Paragraph("CLIENT DETAILS"+"",font2);  paras102.getFont().setStyle(Font.BOLD);
 PdfPCell cell320=new PdfPCell( paras102);    cell320.setBorder(Rectangle.NO_BORDER);
  colstable2.addCell(cell320);  
  
Paragraph paras103=new Paragraph("SERVICE DETAILS"+"",font2);   paras103.getFont().setStyle(Font.BOLD);
 PdfPCell cell321=new PdfPCell( paras103);    cell321.setBorder(Rectangle.NO_BORDER);
  colstable2.addCell(cell321);  
  
  PdfPCell cell2=new PdfPCell(new Phrase(" ")); cell2.setBorder(Rectangle.NO_BORDER);  
  colstable2.addCell(cell2);  
  
   Paragraph paras1=new Paragraph(servicedclient+",",font4);  
  paras1.setAlignment(Paragraph.ALIGN_CENTER);  paras1.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);   
  PdfPCell cell31=new PdfPCell(paras1); cell31.setBorder(Rectangle.NO_BORDER); 
  colstable2.addCell(cell31); 
 
  callno=String.valueOf(servicerecTable.getValueAt(selectedrw,2));
  location=String.valueOf(servicerecTable.getValueAt(selectedrw,10));
  servicedate=String.valueOf(servicerecTable.getValueAt(selectedrw,4));
  from=String.valueOf(servicerecTable.getValueAt(selectedrw,5));
  to=String.valueOf(servicerecTable.getValueAt(selectedrw,6));
 String servicedby=String.valueOf(servicerecTable.getValueAt(selectedrw,15));
  equipmodel=String.valueOf(servicerecTable.getValueAt(selectedrw,8));
 serial=String.valueOf(servicerecTable.getValueAt(selectedrw,9)); 
  
  float[] colswidth7=new float[]{6f,15f};
   PdfPTable colstable7=new PdfPTable(colswidth7);
    colstable7 .setWidthPercentage(80);//colstable.setHorizontalAlignment();
      colstable7.setHorizontalAlignment(Element.ALIGN_LEFT);  
      
 
   String getclientsql="SELECT CALLS.CONTRACT_NO,CONTRACTS.CONT_DESCRIP, CLIENTS.CLIENTNAME,CLIENTS.CLIENT_NO,CLIENTS.POBOX,CLIENTS.TOWN,CLIENTS.CONT_PERSON,"
           + "CLIENTS.MOBILE, CLIENTS.EMAIL FROM CALLS LEFT JOIN CONTRACTS ON CALLS.CONTRACT_NO=CONTRACTS.CONTRACT_NO "
           + "LEFT JOIN CLIENTS ON CONTRACTS.CLIENT_NO=CLIENTS.CLIENT_NO "
           + "WHERE CALLS.CALL_NO='"+callno+"'";
   PreparedStatement pst3=(PreparedStatement)connectDb.prepareStatement(getclientsql);
  ResultSet rst5=pst3.executeQuery();
  while(rst5.next()){
       Paragraph paras1315=new Paragraph("Location: ",font2);paras1315.getFont().setStyle(Font.BOLD);
   paras1315.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell253=new PdfPCell(paras1315);cell253.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell253 );   
   
   PdfPCell cell253t=new PdfPCell(new Phrase(location,font4));cell253t.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell253t );    
      
   Paragraph paras131=new Paragraph("P.O. BOX "+rst5.getString(4)+",",font4);paras131.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT); 
   paras131.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell23=new PdfPCell(paras131);cell23.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell23 ); 
   
    PdfPCell cell324=new PdfPCell( new Phrase("Service Date: ",font2));    cell324.setBorder(Rectangle.NO_BORDER);
  colstable2.addCell(cell324); 

      PdfPCell cell253x=new PdfPCell(new Phrase(servicedate,font4));cell253x.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell253x ); 
   
   Paragraph paras15=new Paragraph(rst5.getString(5)+".",font4);paras15.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT); 
  paras15.setAlignment(Paragraph.ALIGN_CENTER);  
  PdfPCell cell5=new PdfPCell(paras15);cell5.setBorder(Rectangle.NO_BORDER);  
  colstable2.addCell(cell5); 
 
     
   Paragraph paras1312=new Paragraph("Time: ",font2);paras1312.getFont().setStyle(Font.BOLD);
   paras1312.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell223=new PdfPCell(paras1312);cell223.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell223 );  

   PdfPCell cell253s=new PdfPCell(new Phrase( "From: "+from+" To: "+to,font4));cell253s.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell253s ); 
   
   colstable2.addCell(cell2);  
   
     
  Paragraph paras103C=new Paragraph("EQUIPMENT DETAILS"+"",font2);  paras103.getFont().setStyle(Font.BOLD);
 PdfPCell cell321d=new PdfPCell( paras103C);    cell321d.setBorder(Rectangle.NO_BORDER); cell321d.setColspan(2); 
  colstable7.addCell(cell321d); 

    Paragraph paras13162=new Paragraph("Model: ",font2);paras1312.getFont().setStyle(Font.BOLD); 
   paras13162.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell5233=new PdfPCell(paras13162);cell5233.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5233 ); 
   
    PdfPCell cell5223v=new PdfPCell(new Phrase(equipmodel,font4));cell5223v.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5223v ); 
     
     Paragraph paras13192=new Paragraph("Serial No: ",font2);paras1312.getFont().setStyle(Font.BOLD);
   paras13192.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell5283=new PdfPCell(paras13192);cell5283.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5283 ); 
   
    PdfPCell cell5223b=new PdfPCell(new Phrase(serial,font4));cell5223b.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5223b ); 
     
fault=String.valueOf(servicerecTable.getValueAt(selectedrw,12));
      Paragraph paras131342=new Paragraph("Fault Reported:  ",font2);paras1312.getFont().setStyle(Font.BOLD);
   paras131342.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell5383=new PdfPCell(paras131342);cell5383.setBorder(Rectangle.NO_BORDER);  
     colstable7.addCell(cell5383 ); 
     
    PdfPCell cell5223n=new PdfPCell(new Phrase(fault,font4));cell5223n.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5223n ); 
   
   Paragraph paras13182=new Paragraph("Serviced By: ",font2);paras1312.getFont().setStyle(Font.BOLD);
   paras13182.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell5223=new PdfPCell(paras13182);cell5223.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5223 ); 
   
   PdfPCell cell5223x=new PdfPCell(new Phrase(servicedby,font4));cell5223x.setBorder(Rectangle.NO_BORDER);  
   colstable7.addCell(cell5223x ); 
      }
   receiptDoc.add(colstable2);   receiptDoc.add(space);  receiptDoc.add(colstable7);    
   
   float[] colswidth;      com.itextpdf.text.pdf.PdfPTable subjreportTable = null;
  float[] colswidth2=new float[]{15f};
   PdfPTable colstable=new PdfPTable(colswidth2);
     colstable .setWidthPercentage(100);//colstable.setHorizontalAlignment();
      colstable.setHorizontalAlignment(Element.ALIGN_CENTER); 
      
  receiptDoc.add(space); //receiptDoc.add(space); 
  
  action=String.valueOf(servicerecTable.getValueAt(selectedrw,13));
  Paragraph paras145=new Paragraph("ACTIONS TAKEN",font2);paras145.getFont().setStyle(Font.BOLD);
paras145.setAlignment(Paragraph.ALIGN_LEFT);    
   colswidth = new float[]{50f  };
   subjreportTable=new  com.itextpdf.text.pdf.PdfPTable(colswidth);
          subjreportTable .setWidthPercentage(100);  
          
 PdfPCell cell589B=new PdfPCell( paras145);cell589B.setBorder(Rectangle.NO_BORDER);  
   subjreportTable.addCell(cell589B);  
          
  PdfPCell cell589=new PdfPCell(new Phrase(action,font4));cell589.setBorder(Rectangle.NO_BORDER);  
   subjreportTable.addCell(cell589);    
    receiptDoc.add(subjreportTable); receiptDoc.add(space);
    
  Paragraph paras1478=new Paragraph("FINDINGS",font2);
paras1478.setAlignment(Paragraph.ALIGN_LEFT);  paras1478.getFont().setStyle(Font.BOLD);
 PdfPCell cell589V=new PdfPCell( paras1478);cell589V.setBorder(Rectangle.NO_BORDER);   
 cell589V.setColspan(2); 
 float[] colswidth78 = new float[]{1f,30f  };
    PdfPTable   subjreportTable2=new  com.itextpdf.text.pdf.PdfPTable(colswidth78);
          subjreportTable2.setWidthPercentage(100);   
  subjreportTable2.addCell(cell589V); 
  
    String getfindings="SELECT * FROM SERVICE_FINDINGS WHERE SERVICE_NO='"+serviceno+"'";
  PreparedStatement pst89=(PreparedStatement)connectDb.prepareStatement(getfindings);
  ResultSet rst89=pst89.executeQuery(); int t=1;
  while(rst89.next()){
  PdfPCell cell34=new PdfPCell(new Phrase(t+".",font4));cell34.setBorder(Rectangle.NO_BORDER); 
  subjreportTable2.addCell(cell34); 
  PdfPCell cell35=new PdfPCell(new Phrase(rst89.getString(2),font4)); cell35.setBorder(Rectangle.NO_BORDER); 
   subjreportTable2.addCell(cell35); 
  t++;
  }
    receiptDoc.add( subjreportTable2); receiptDoc.add( space);
    
    
     Paragraph paras1428=new Paragraph("RECOMMENDATIONS & CONCLUSION",font2);
paras1428.setAlignment(Paragraph.ALIGN_LEFT);  paras1428.getFont().setStyle(Font.BOLD);
 
  PdfPTable   subjreportTable3=new  com.itextpdf.text.pdf.PdfPTable(colswidth78);
          subjreportTable3.setWidthPercentage(100);  
    PdfPCell cell34X=new PdfPCell(paras1428);cell34X.setBorder(Rectangle.NO_BORDER);  cell34X.setColspan(2); 
    subjreportTable3.addCell(cell34X); 
    
  String getrecommendations="SELECT * FROM SERVICE_RECOMMENDATIONS WHERE SERVICE_NO='"+serviceno+"'";
  PreparedStatement pst891=(PreparedStatement)connectDb.prepareStatement(getrecommendations);
  ResultSet rst891=pst891.executeQuery(); int q=1;
  while(rst891.next()){
  PdfPCell cell34=new PdfPCell(new Phrase(q+".",font4));cell34.setBorder(Rectangle.NO_BORDER); 
  subjreportTable3.addCell(cell34); 
  PdfPCell cell35=new PdfPCell(new Phrase(rst891.getString(2),font4)); cell35.setBorder(Rectangle.NO_BORDER); 
   subjreportTable3.addCell(cell35); 
  q++;
  }         
  receiptDoc.add( subjreportTable3); 
         
    receiptDoc.add(space); //receiptDoc.add(space);receiptDoc.add(space);
   
    Paragraph NOTE=new Paragraph("ADDITIONAL NOTES: ",font2);
            NOTE.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE);
     
      Paragraph NOTE4=new Paragraph("1.__________________________________________________________________________",font4);
     NOTE4.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE4);     receiptDoc.add(space);
     
        Paragraph NOTE41=new Paragraph("2.__________________________________________________________________________",font4);
     NOTE41.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE41); 
     
      receiptDoc.add(space);   
      
       Paragraph NOTE3=new Paragraph("SIGNATURE: ",font2);
            NOTE3.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE3);    
 Paragraph cell281=new Paragraph(new Phrase(" Signature:_________________________ Date:_________________________ ",font4) ); 
   receiptDoc.add(cell281);
  
 //receiptDoc.add(space); receiptDoc.add(space);
   
   receiptDoc.add(space);receiptDoc.add(space);
     
   Paragraph user=new Paragraph("TECHNICAL SERVICE DEPARTMENT                        System Generated By: "+currentuser+"  on "+printdate,font4);
            user.setAlignment(Paragraph.ALIGN_CENTER);
            receiptDoc.add(user);
            receiptDoc.close();
          Executable.openDocument(directory);     
        }      
        }   catch (SQLException | DocumentException | FileNotFoundException ex) {
            Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IOException ex) {
              Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
          }
  
     }
     else{
     JOptionPane.showMessageDialog(null, "Please select a service from the list below!","No Service Selected",JOptionPane.WARNING_MESSAGE);
     }
  }   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Editservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Editservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Editservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Editservice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Editservice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea actiontakentxtArea;
    public javax.swing.JButton adminsaveBtn;
    public javax.swing.JButton adminsaveBtn1;
    private javax.swing.JTextField calldateTxt;
    private javax.swing.JTextField callnoTxt;
    private javax.swing.JTextField callsearchTxt;
    private javax.swing.JTextField clientnameTxt;
    public javax.swing.JPanel editservicePanel;
    public javax.swing.JPanel editserviceholderPanel;
    private javax.swing.JSpinner endMinspinner;
    private javax.swing.JComboBox<String> endhourCombo;
    private javax.swing.JTextField equipdescriptionTxt;
    private javax.swing.JTextField equipmodelTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField locationTxt;
    public javax.swing.JPanel savebtnholderPanel;
    private javax.swing.JTextField searchstaffnameTxt;
    private javax.swing.JTextField serialnoTxt;
    public javax.swing.JPanel servicedatePanel;
    public org.jdesktop.swingx.JXDatePicker servicedatePicker;
    public javax.swing.JTextField servicedateTxt;
    private javax.swing.JTextField servicenoTxt;
    private javax.swing.JTable servicerecTable;
    private javax.swing.JPanel servicerecordPanel;
    private javax.swing.JTextField servicestatusTxt;
    private javax.swing.JSpinner startMinspinner;
    private javax.swing.JComboBox<String> starthourCombo;
    private javax.swing.JTable techTable;
    private javax.swing.JComboBox<String> townComboBox;
    private javax.swing.JTextField townTxt;
    public javax.swing.JPanel unlockclaimPanel;
    public javax.swing.JPanel unlockholderPanel;
    // End of variables declaration//GEN-END:variables
}
