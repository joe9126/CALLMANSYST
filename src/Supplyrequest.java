
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.tools.Executable;
import com.sun.glass.events.KeyEvent;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author JOE
 */
public class Supplyrequest extends javax.swing.JFrame {
    Home access=new Home(); double totalCSRValue;String SELECTEDcsrnum;
     Document   receiptDoc;  Image companylogo; int lastcsr;
       SimpleDateFormat sdf=new SimpleDateFormat("dd MMM,yyyy");
   DecimalFormat df1=new DecimalFormat("#,###.00");
   String[] cols={"","NO","PART NO","DESCRIPTION","QTY","UNIT COST ","SUB TOTAL "};
  DefaultTableModel purchasetableModel=new DefaultTableModel(cols,0){
   @Override
   public boolean isCellEditable(int row,int column){
        return column == 0||column == 5||column==2||column==3||column==4;
   }  };      
    NumberFormat formatter=NumberFormat.getNumberInstance(Locale.UK); 
   String CLIENTNAME,currency,soldby,clientsname,currentuser,salespersonID,directory;
   Date PODate, csrDate;String FSM,GM,CEO,CFO;
   
 String[] cols2={"NO","CLIENT","CSR No.","DESCRIPTION","CSR DATE","PO DATE ","PO No.","CSR VALUE","VAT %","SALES PERSON","INVOICE NO."};
  DefaultTableModel csrtableModel=new DefaultTableModel(cols2,0){
   @Override
   public boolean isCellEditable(int row,int column){
        return column == 0;
   }  };         
 DefaultComboBoxModel  soldbycomboModel=new DefaultComboBoxModel();
    public Supplyrequest() {
        initComponents();
         purchaseTable.getTableHeader().setReorderingAllowed(false);
           purchaseTable.getColumnModel().getColumn(0).setPreferredWidth(1);
            purchaseTable.getColumnModel().getColumn(1).setPreferredWidth(1);
             purchaseTable.getColumnModel().getColumn(2).setPreferredWidth(5);
              purchaseTable.getColumnModel().getColumn(3).setPreferredWidth(15);
             purchaseTable.getColumnModel().getColumn(4).setPreferredWidth(5);
              purchaseTable.getColumnModel().getColumn(5).setPreferredWidth(5);
             
      TableColumn tc =purchaseTable.getColumnModel().getColumn(0);
     tc.setCellEditor(purchaseTable.getDefaultEditor(Boolean.class));
     tc.setCellRenderer(purchaseTable.getDefaultRenderer(Boolean.class));        
           purchasetableModel.addRow(new Object[]{false,"1","","","","",""});
           
           csrTable.getTableHeader().setReorderingAllowed(false);
          csrTable.getColumnModel().getColumn(0).setPreferredWidth(1);
           /* csrTable.getColumnModel().getColumn(2).setPreferredWidth(3);
           csrTable.getColumnModel().getColumn(4).setPreferredWidth(3);
           csrTable.getColumnModel().getColumn(5).setPreferredWidth(3);
           csrTable.getColumnModel().getColumn(6).setPreferredWidth(2);
           csrTable.getColumnModel().getColumn(8).setPreferredWidth(3);*/
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        csrPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        clientPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cleintnameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cleintnoTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        addressTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        contactpersonTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        townTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        telephoneTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        csrnumTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        descripTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        CSRdateTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        currencyCombo = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        POdateTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        soldbyCombo = new javax.swing.JComboBox<>();
        csrdatePicker = new org.jdesktop.swingx.JXDatePicker();
        orderdatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel17 = new javax.swing.JLabel();
        ponumTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        purchaseTable = new javax.swing.JTable();
        jLabel16 = new javax.swing.JLabel();
        vatTxt = new javax.swing.JTextField();
        currencyTxt = new javax.swing.JTextField();
        soldbyTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        totalvaluevatexTxt = new javax.swing.JTextField();
        totalvaluevatinclTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        invoicenoTxt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        searchTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        csrTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        csrPanel.setBackground(new java.awt.Color(153, 0, 153));
        csrPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CUSTOMER SUPPLY REQUEST", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        clientPanel2.setBackground(new java.awt.Color(255, 255, 255));
        clientPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CLIENT DETAILS", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(204, 0, 204))); // NOI18N
        clientPanel2.setForeground(new java.awt.Color(204, 0, 204));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("CLIENT NAME:");

        cleintnameTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        cleintnameTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cleintnameTxtMouseExited(evt);
            }
        });
        cleintnameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cleintnameTxtKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("CLIENT NO:");

        cleintnoTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("P.O. BOX:");

        addressTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("TOWN:");

        contactpersonTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("ATTN:");

        townTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel10.setText("PHONE:");

        telephoneTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        telephoneTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                telephoneTxtKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel7.setText("EMAIL:");

        emailTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton4.setText("SAVE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton5.setText("UPDATE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("DELETE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton1.setText("PRINT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout clientPanel2Layout = new javax.swing.GroupLayout(clientPanel2);
        clientPanel2.setLayout(clientPanel2Layout);
        clientPanel2Layout.setHorizontalGroup(
            clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanel2Layout.createSequentialGroup()
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1))
                    .addGroup(clientPanel2Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(telephoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(contactpersonTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                .addComponent(cleintnoTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(cleintnameTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(addressTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(emailTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(townTxt, javax.swing.GroupLayout.Alignment.TRAILING)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        clientPanel2Layout.setVerticalGroup(
            clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cleintnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(cleintnoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contactpersonTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(telephoneTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(townTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(clientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton1))
                .addGap(36, 36, 36))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CSR DETAILS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12), new java.awt.Color(204, 0, 204))); // NOI18N
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jPanel3MouseExited(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("CSR NO:");

        csrnumTxt.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("DESCRIPTION:");

        descripTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel11.setText("CSR DATE:");

        CSRdateTxt.setEditable(false);
        CSRdateTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setText("CURRENCY:");

        currencyCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        currencyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "KES", "USD", "EUR" }));
        currencyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currencyComboActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel14.setText("ORDER DATE:");

        POdateTxt.setEditable(false);
        POdateTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        POdateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                POdateTxtActionPerformed(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("SOLD BY:");

        soldbyCombo.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        soldbyCombo.setModel(soldbycomboModel);
        soldbyCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soldbyComboActionPerformed(evt);
            }
        });

        csrdatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csrdatePickerActionPerformed(evt);
            }
        });

        orderdatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderdatePickerActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel17.setText("PO No:");

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PURCHASE ITEMS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 204))); // NOI18N

        purchaseTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        purchaseTable.setModel(purchasetableModel);
        purchaseTable.setCellSelectionEnabled(true);
        purchaseTable.setFillsViewportHeight(true);
        purchaseTable.setGridColor(new java.awt.Color(153, 0, 153));
        purchaseTable.setRowHeight(25);
        purchaseTable.setRowMargin(0);
        purchaseTable.setSelectionBackground(new java.awt.Color(204, 0, 153));
        purchaseTable.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                purchaseTableAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });
        purchaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                purchaseTableMouseClicked(evt);
            }
        });
        purchaseTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                purchaseTableInputMethodTextChanged(evt);
            }
        });
        purchaseTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                purchaseTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                purchaseTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(purchaseTable);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("VAT %:");

        vatTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                vatTxtKeyTyped(evt);
            }
        });

        currencyTxt.setEditable(false);

        jLabel1.setText("TOTAL VAT EX:");

        totalvaluevatexTxt.setEditable(false);
        totalvaluevatexTxt.setBackground(new java.awt.Color(0, 0, 0));
        totalvaluevatexTxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalvaluevatexTxt.setForeground(new java.awt.Color(0, 204, 0));
        totalvaluevatexTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        totalvaluevatinclTxt.setEditable(false);
        totalvaluevatinclTxt.setBackground(new java.awt.Color(0, 0, 0));
        totalvaluevatinclTxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalvaluevatinclTxt.setForeground(new java.awt.Color(0, 204, 0));
        totalvaluevatinclTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel13.setText("TOTAL VAT INCL:");

        jLabel18.setText("INVOICE NO:");

        invoicenoTxt.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        invoicenoTxt.setText("N/A");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(orderdatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(POdateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel11))
                                .addGap(38, 38, 38))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(csrdatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CSRdateTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                            .addComponent(descripTxt)
                            .addComponent(csrnumTxt))))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currencyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currencyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17)
                            .addComponent(jLabel16))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(ponumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(totalvaluevatexTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel13)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(soldbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(soldbyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalvaluevatinclTxt))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(vatTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(invoicenoTxt)))))
                .addContainerGap())
            .addComponent(jScrollPane2)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(totalvaluevatinclTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CSRdateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(csrdatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel15)
                            .addComponent(soldbyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(soldbyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(csrnumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel17)
                            .addComponent(ponumTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel1)
                            .addComponent(totalvaluevatexTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(descripTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(currencyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currencyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGap(66, 66, 66)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(POdateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(orderdatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(vatTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18)
                        .addComponent(invoicenoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 204))); // NOI18N

        searchTxt.setText("Search client");
        searchTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTxtMouseClicked(evt);
            }
        });
        searchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchTxtKeyReleased(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CUSTOMER SUPPLY REQUESTS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(204, 0, 204))); // NOI18N

        csrTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        csrTable.setModel(csrtableModel);
        csrTable.setFillsViewportHeight(true);
        csrTable.setGridColor(new java.awt.Color(204, 0, 204));
        csrTable.setRowHeight(25);
        csrTable.setRowMargin(2);
        csrTable.setSelectionBackground(new java.awt.Color(204, 0, 204));
        csrTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                csrTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(csrTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 999, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1274, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout csrPanelLayout = new javax.swing.GroupLayout(csrPanel);
        csrPanel.setLayout(csrPanelLayout);
        csrPanelLayout.setHorizontalGroup(
            csrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(csrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        csrPanelLayout.setVerticalGroup(
            csrPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(csrPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(csrPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(csrPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cleintnameTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cleintnameTxtMouseExited
        cleintnameTxt.setText(clientsname);
    }//GEN-LAST:event_cleintnameTxtMouseExited

    private void cleintnameTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cleintnameTxtKeyTyped
        getClients();
    }//GEN-LAST:event_cleintnameTxtKeyTyped

    private void telephoneTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_telephoneTxtKeyTyped
        char c=evt.getKeyChar();
        if(!((c>='0')&&(c<='9')||(c==KeyEvent.VK_BACKSPACE)||(c==KeyEvent.VK_DELETE))){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_telephoneTxtKeyTyped

    private void currencyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currencyComboActionPerformed
        currency=""+currencyCombo.getSelectedItem();
        currencyTxt.setText(currency); 
    }//GEN-LAST:event_currencyComboActionPerformed

    private void POdateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_POdateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_POdateTxtActionPerformed

    private void soldbyComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soldbyComboActionPerformed
        try {
            soldby=""+soldbyCombo.getSelectedItem();
            soldbyTxt.setText(soldby);
            String technsql="SELECT STAFFNO, STAFFNAME FROM STAFF where STAFFNAME='"+soldby+"' ORDER BY STAFFNAME asc";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(technsql);
            ResultSet rst=pst.executeQuery(); int i=0;
       while(rst.next()){
       salespersonID=rst.getString(1);
       }     
        } catch (SQLException ex) {
            Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_soldbyComboActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if(cleintnameTxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter client name!","Client Number Required",JOptionPane.WARNING_MESSAGE);
        }else{
            if(csrnumTxt.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please enter Supply Request number!","Supply Request Number Required",JOptionPane.WARNING_MESSAGE);
            }else if(descripTxt.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please enter Supply Request description!","Supply Request Description Required",JOptionPane.WARNING_MESSAGE);
            }else if(csrDate==null){
                JOptionPane.showMessageDialog(null,"Please select Supply Request Date!","Supply Request Date Required",JOptionPane.WARNING_MESSAGE);
            }else  if(PODate==null){
                JOptionPane.showMessageDialog(null,"Please select Order date!","Order Date Required",JOptionPane.WARNING_MESSAGE);
            }else if(currency==null){
                JOptionPane.showMessageDialog(null,"Please select  currency!","Currency Required",JOptionPane.WARNING_MESSAGE);
            }
            else if(soldby==null){
                JOptionPane.showMessageDialog(null,"Please Select Sales Person !","Sales Person Required",JOptionPane.WARNING_MESSAGE);
            }else if(vatTxt.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please enter VAT Percentage !","VAT Percentage Required",JOptionPane.WARNING_MESSAGE);
            } 
            else if(vaidCheck()){
   int choice=JOptionPane.showConfirmDialog(null, "Do you want to save new Supply Request "+csrnumTxt.getText()+" for "+cleintnameTxt.getText()+" ?"
                    ,"Confirm",JOptionPane.YES_NO_OPTION);

  if(choice==JOptionPane.YES_OPTION){
    try {
    String getusersql="SELECT CSRNO FROM SUPPLY_REQUESTS WHERE CSRNO='"+csrnumTxt.getText()+"'";
                        Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
                        PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getusersql);
                        ResultSet rst=pst.executeQuery(); int i=0;
                        while(rst.next()){
                            i++;
                        }
                        if(i>0){
     JOptionPane.showMessageDialog(null,"Supply Request Number must be unique!","Supply Request Number Required",JOptionPane.WARNING_MESSAGE);
                        }else{
                           int r=purchaseTable.getRowCount();
                            String insertsql="INSERT INTO SUPPLY_REQUESTS VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement pst3=(PreparedStatement)connectDb.prepareStatement(insertsql);
                     pst3.setInt(1, 0);  
                            pst3.setString(2, cleintnoTxt.getText());  
                         pst3.setString(3, csrnumTxt.getText()); 
                            pst3.setString(4, descripTxt.getText( )); 
                            pst3.setDate(5, csrDate);
                            pst3.setDate(6, PODate);
                            pst3.setString(7, ponumTxt.getText());
                            pst3.setString(8, currency); 
                              for(int g=0;g<r;g++){
      totalCSRValue=totalCSRValue+Double.parseDouble(String.valueOf(purchaseTable.getValueAt(g,6)));                         
                              }
                            pst3.setDouble(9, totalCSRValue);
                             pst3.setDouble(10, Double.parseDouble(vatTxt.getText())); 
                            pst3.setString(11, soldby); 
                            pst3.setString(12, "NONE");
                             int p= pst3.executeUpdate();
                             
               
            String insertsql2="INSERT INTO CSRITEMS VALUES(?,?,?,?,?)"; 
              PreparedStatement pst4=(PreparedStatement)connectDb.prepareStatement(insertsql2);
                for(int g=0;g<r;g++){
            pst4.setString(1, csrnumTxt.getText());    pst4.setString(2,String.valueOf(purchaseTable.getValueAt(g, 2)));   
              pst4.setString(3,String.valueOf(purchaseTable.getValueAt(g, 3)));  
                pst4.setString(4,String.valueOf(purchaseTable.getValueAt(g, 4)));
                  pst4.setString(5,String.valueOf(purchaseTable.getValueAt(g, 5)));   
         p=   pst4.executeUpdate();
                
                }
                            if(p>0){
   getCSR();                             
  JOptionPane.showMessageDialog(null,"Supply Request Number "+csrnumTxt.getText()+" details saved successfully!","Successful",JOptionPane.INFORMATION_MESSAGE);
                       }
                        }
 String insertsql="";
                    } catch (SQLException ex) {
                        Logger.getLogger(Contracts.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            totalCSRValue=0;     }
            else{
     JOptionPane.showMessageDialog(null,"Please fill all fields in Purchase Items table!","Purchase Items Required",JOptionPane.WARNING_MESSAGE);          
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    public boolean vaidCheck()
{
if(purchaseTable.getCellEditor()!=null){
purchaseTable.getCellEditor().stopCellEditing();
}
for(int i=0;i< purchaseTable.getRowCount();i++)
{
for (int j=0;j<purchaseTable.getColumnCount()-1;j++)
{
    try{
 String om=purchaseTable.getValueAt(i,j).toString();
System.out.println("Value ="+om+ " and Length :"+om.length());
if(om.trim().length()==0)
{
return false;
}   
    } catch(NullPointerException ex){
   // JOptionPane.showMessageDialog(null, "Cell is empty !");
    }
}
}
return true;
}
    
  public void getStaff(){
           try {
               String technsql="SELECT STAFFNO, STAFFNAME FROM STAFF ORDER BY STAFFNAME ASC";
               Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
               PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(technsql);
               ResultSet rst=pst.executeQuery(); int i=0;
             soldbycomboModel.removeAllElements();
               soldbycomboModel.addElement("--Select Sales Person--");
               while(rst.next()){
                   soldbycomboModel.addElement(rst.getString(2));
                  i++;
               }
               if(i<1){
              
               }
           } catch (SQLException ex) {
               Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
           }
  
 }   
  
public void getCSRnum(){
        try {
            String sql="SELECT * FROM SUPPLY_REQUESTS ";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(sql);
            ResultSet rst=pst.executeQuery(); int i=0;
            while(rst.next()){
        lastcsr++;
                  i++;
            }
         int year=LocalDate.now().getYear(); 
         if((i+1)<10){
          csrnumTxt.setText("TS"+year+"/00"+(i+1)); 
         }else  if((i+1)>=10&&(i+1)<100){
          csrnumTxt.setText("TS"+year+"/0"+(i+1)); 
         }else {
           csrnumTxt.setText("TS"+year+"/"+(i+1)); 
         }
       System.out.println("Last csr number "+lastcsr);
        } catch (SQLException ex) {
            Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
        }
}  
    
 public void getCSR(){
        try {
  
  String getcsrsql="SELECT SUPPLY_REQUESTS.CLIENTNO,CLIENTS.clientname,SUPPLY_REQUESTS.CSRNO, SUPPLY_REQUESTS.DESCRIPTION,SUPPLY_REQUESTS.CSRDATE,SUPPLY_REQUESTS.PODATE," +
"   SUPPLY_REQUESTS.PONUM,SUPPLY_REQUESTS.CURRENCY,SUPPLY_REQUESTS.CSRVALUE,SUPPLY_REQUESTS.VAT,SUPPLY_REQUESTS.SOLDBY,SUPPLY_REQUESTS.NUM,SUPPLY_REQUESTS.invoice_no  FROM SUPPLY_REQUESTS " +
"left JOIN CLIENTS ON SUPPLY_REQUESTS.CLIENTNO=CLIENTS.CLIENT_NO ORDER BY SUPPLY_REQUESTS.CSRNO DESC ";
  
  if(!searchTxt.getText().isEmpty()&& !searchTxt.getText().equalsIgnoreCase("Search client")){
   getcsrsql="SELECT SUPPLY_REQUESTS.CLIENTNO,CLIENTS.clientname,SUPPLY_REQUESTS.CSRNO, SUPPLY_REQUESTS.DESCRIPTION,SUPPLY_REQUESTS.CSRDATE,SUPPLY_REQUESTS.PODATE," +
"   SUPPLY_REQUESTS.PONUM,SUPPLY_REQUESTS.CURRENCY,SUPPLY_REQUESTS.CSRVALUE,SUPPLY_REQUESTS.VAT,SUPPLY_REQUESTS.SOLDBY,SUPPLY_REQUESTS.NUM,SUPPLY_REQUESTS.invoice_no"
           + "  FROM SUPPLY_REQUESTS " +
"left JOIN CLIENTS ON SUPPLY_REQUESTS.CLIENTNO=CLIENTS.CLIENT_NO WHERE CLIENTS.clientname like '"+searchTxt.getText()+"%' ORDER BY SUPPLY_REQUESTS.CSRNO DESC ";
   }
 
    Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
  PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcsrsql);
   ResultSet rst=pst.executeQuery(); int i=0;
   int rows=csrTable.getRowCount();
   for(int g=0;g<rows;g++){
   csrtableModel.removeRow(0);
   }
       while(rst.next()){
         
 csrtableModel.addRow(new Object[]{rst.getInt(12),rst.getString(2),rst.getString(3),rst.getString(4),sdf.format(rst.getDate(5)),sdf.format(rst.getDate(6))
 ,rst.getString(7),rst.getString(8)+". "+formatter.format(rst.getDouble(9)),rst.getString(10),rst.getString(11),rst.getString(13)}); 
                i++;
            }
        } catch (SQLException ex) {
            Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
        }
 }   
    
    private void csrdatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csrdatePickerActionPerformed
      csrDate= new java.sql.Date(csrdatePicker.getDate().getTime());
         CSRdateTxt.setText(sdf.format(csrDate));
    }//GEN-LAST:event_csrdatePickerActionPerformed

    private void orderdatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderdatePickerActionPerformed
      PODate= new java.sql.Date(orderdatePicker.getDate().getTime());
       POdateTxt.setText(sdf.format(PODate));
        
    }//GEN-LAST:event_orderdatePickerActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
  int r=purchaseTable.getRowCount();
        for(int g=0;g<r;g++){
      totalCSRValue=totalCSRValue+Double.parseDouble(String.valueOf(purchaseTable.getValueAt(g,6)));                         
                              }   

{
    try {
    String getusersql="SELECT CSRNO FROM SUPPLY_REQUESTS WHERE CSRNO='"+csrnumTxt.getText()+"'";
                        Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
                        PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getusersql);
                        ResultSet rst=pst.executeQuery(); int i=0;
                        while(rst.next()){
                            i++;
                        }
                        if(i>0){
         int choice=JOptionPane.showConfirmDialog(null, "Do you want to updateSupply Request "+csrnumTxt.getText()+" for "+cleintnameTxt.getText()+" ?"
                    ,"Confirm",JOptionPane.YES_NO_OPTION); 
           if(choice==JOptionPane.YES_OPTION){
                  String insertsql;          PreparedStatement pst3;
   if(csrDate!=null&&PODate!=null){
     insertsql="UPDATE SUPPLY_REQUESTS SET CLIENTNO=?,DESCRIPTION=?, CSRDATE=?,PODATE=?,PONUM=?,CURRENCY=?,CSRVALUE=?,VAT=?"
                      + ",SOLDBY=?, INVOICE_NO=? WHERE CSRNO='"+csrnumTxt.getText()+"'";
    pst3=(PreparedStatement)connectDb.prepareStatement(insertsql);
                         pst3.setString(1, cleintnoTxt.getText());   
                            pst3.setString(2, descripTxt.getText( )); pst3.setDate(3, csrDate);
                            pst3.setDate(4, PODate); pst3.setString(5, ponumTxt.getText());pst3.setString(6, currencyTxt.getText()); 
                           pst3.setDouble(7, totalCSRValue);
                             pst3.setDouble(8, Double.parseDouble(vatTxt.getText())); 
                            pst3.setString(9, soldbyTxt.getText());    
                               pst3.setString(10, invoicenoTxt.getText());  
     
   }  else  if(csrDate!=null )  {
     insertsql="UPDATE SUPPLY_REQUESTS SET CLIENTNO=?,DESCRIPTION=?, CSRDATE=?, PONUM=?,CURRENCY=?,CSRVALUE=?,VAT=?"
                      + ",SOLDBY=?, INVOICE_NO=? WHERE CSRNO='"+csrnumTxt.getText()+"'"; 
   pst3=(PreparedStatement)connectDb.prepareStatement(insertsql);
                         pst3.setString(1, cleintnoTxt.getText());   
                            pst3.setString(2, descripTxt.getText( )); pst3.setDate(3, csrDate);
                       pst3.setString(4, ponumTxt.getText());pst3.setString(5, currencyTxt.getText()); 
                           pst3.setDouble(6, totalCSRValue);
                             pst3.setDouble(7, Double.parseDouble(vatTxt.getText())); 
                            pst3.setString(8, soldbyTxt.getText());  
                               pst3.setString(9, invoicenoTxt.getText());  
     
   }
   else if(PODate!=null){
    insertsql="UPDATE SUPPLY_REQUESTS SET CLIENTNO=?,DESCRIPTION=?, PODATE=?,PONUM=?,CURRENCY=?,CSRVALUE=?,VAT=?"
                      + ",SOLDBY=?, INVOICE_NO=? WHERE CSRNO='"+csrnumTxt.getText()+"'";
    
     pst3=(PreparedStatement)connectDb.prepareStatement(insertsql);
                         pst3.setString(1, cleintnoTxt.getText());   
                            pst3.setString(2, descripTxt.getText( ));  
                            pst3.setDate(3, PODate); pst3.setString(4, ponumTxt.getText());pst3.setString(5, currencyTxt.getText()); 
                           pst3.setDouble(6, totalCSRValue);
                             pst3.setDouble(7, Double.parseDouble(vatTxt.getText())); 
                            pst3.setString(8, soldbyTxt.getText());  
                               pst3.setString(9, invoicenoTxt.getText());  
   }else{
    insertsql="UPDATE SUPPLY_REQUESTS SET CLIENTNO=?,DESCRIPTION=?,  PONUM=?,CURRENCY=?,CSRVALUE=?,VAT=?"
                      + ",SOLDBY=?, INVOICE_NO=? WHERE CSRNO='"+csrnumTxt.getText()+"'";
    
     pst3=(PreparedStatement)connectDb.prepareStatement(insertsql);
                         pst3.setString(1, cleintnoTxt.getText());   
                            pst3.setString(2, descripTxt.getText( ));  
                       pst3.setString(3, ponumTxt.getText());pst3.setString(4, currencyTxt.getText()); 
                           pst3.setDouble(5, totalCSRValue);
                             pst3.setDouble(6, Double.parseDouble(vatTxt.getText())); 
                            pst3.setString(7, soldbyTxt.getText());  
                             pst3.setString(8, invoicenoTxt.getText());  
   }
     
   int p= pst3.executeUpdate();
 
            String insertsql2;
              PreparedStatement pst4 ; String checpartsql;
              ResultSet rstcheck; int h=0;
                for(int g=0;g<r;g++){
       /* checpartsql="SELECT CSRNO,PARTNO FROM CSRITEMS WHERE CSRNO='"+csrnumTxt.getText()+"' AND "
                  + "PARTNO='"+String.valueOf(purchaseTable.getValueAt(g, 2))+"'"; 
        pst4=(PreparedStatement)connectDb.prepareStatement(checpartsql);
       rstcheck= pst4.executeQuery();
       while(rstcheck.next()){
       h++;
       }
       JOptionPane.showMessageDialog(null, " PART NO STATUS "+h);
*/
    insertsql2="UPDATE CSRITEMS SET  DESCRIPTION=?,QTY=?,UNITCOST=? WHERE CSRNO='"+csrnumTxt.getText()+"' AND "
                  + "PARTNO='"+String.valueOf(purchaseTable.getValueAt(g, 2))+"'"; 
          pst4=(PreparedStatement)connectDb.prepareStatement(insertsql2);
            pst4.setString(1,String.valueOf(purchaseTable.getValueAt(g,3)));   
              pst4.setString(2,String.valueOf(purchaseTable.getValueAt(g, 4)));  
                pst4.setString(3,String.valueOf(purchaseTable.getValueAt(g, 5)));
           p=   pst4.executeUpdate();
           if(p<1){
   String insertsql4="INSERT INTO CSRITEMS VALUES(?,?,?,?,?)"; 
    pst4=(PreparedStatement)connectDb.prepareStatement(insertsql4);
            pst4.setString(1, csrnumTxt.getText());    pst4.setString(2,String.valueOf(purchaseTable.getValueAt(g, 2)));   
              pst4.setString(3,String.valueOf(purchaseTable.getValueAt(g, 3)));  
                pst4.setString(4,String.valueOf(purchaseTable.getValueAt(g, 4)));
                  pst4.setString(5,String.valueOf(purchaseTable.getValueAt(g, 5)));   
        h=   pst4.executeUpdate();
   }             
      }
             
      if(p>0||h>0){
          getCSR();
      JOptionPane.showMessageDialog(null, "Supply Request Number "+csrnumTxt.getText()+" updated successfully!","Update Successful",JOptionPane.INFORMATION_MESSAGE );
      totalCSRValue=0;     }   
           }
             }
                        else{
  JOptionPane.showMessageDialog(null,"Supply Request Number "+csrnumTxt.getText()+" Does not exist!","Supply Request Number Not Found",JOptionPane.WARNING_MESSAGE);                      
                        }                        
    }       catch (SQLException ex) {
                Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
            }
    totalCSRValue=0;   }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            String getusersql="SELECT CSRNO FROM SUPPLY_REQUESTS WHERE CSRNO='"+csrnumTxt.getText()+"'";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getusersql);
            ResultSet rst=pst.executeQuery(); int i=0;
            while(rst.next()){
                i++;
            }
            if(i<1){
            JOptionPane.showMessageDialog(this, "Supply Request No. "+csrnumTxt.getText()+" does not exist!","NOt Found",JOptionPane.WARNING_MESSAGE);
            }
            else{
 int choice=JOptionPane.showConfirmDialog(this, "Do you want to delete Supply Request No. "+csrnumTxt.getText()+"?","Confirm",JOptionPane.YES_NO_OPTION);
        if(choice==JOptionPane.YES_OPTION){
  String deletesql="DELETE FROM SUPPLY_REQUESTS WHERE CSRNO='"+csrnumTxt.getText()+"'";      
   PreparedStatement pstS=(PreparedStatement)connectDb.prepareStatement(deletesql);
   int f=pstS.executeUpdate();
   if(f>0){
  String deletesql2="DELETE FROM CSRITEMS WHERE CSRNO='"+csrnumTxt.getText()+"'";      
   pstS=(PreparedStatement)connectDb.prepareStatement(deletesql2);
   int f2=pstS.executeUpdate(); 
  
    if(f2>0){
       JOptionPane.showMessageDialog(this,"Supply Request No. "+csrnumTxt.getText()+" deleted successfully!","Successful",JOptionPane.INFORMATION_MESSAGE);
     cleintnameTxt.setText(null); 
 csrnumTxt.setText(null); cleintnoTxt.setText(null); addressTxt.setText(null); emailTxt.setText(null); contactpersonTxt.setText(null);
 telephoneTxt.setText(null); townTxt.setText(null);ponumTxt.setText(null); descripTxt.setText(null); currencyTxt.setText(null);
 CSRdateTxt.setText(null); soldbyTxt.setText(null);
 POdateTxt.setText(null); vatTxt.setText(null);
  int r=purchaseTable.getRowCount();
        for(int g=0;g<r;g++){
        purchasetableModel.removeRow(0);
        }
  getCSR();
   }
    }

        }    }
        } catch (SQLException ex) {
            Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void vatTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_vatTxtKeyTyped
            char c=evt.getKeyChar();
        if(!((c>='0')&&(c<='9') )){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_vatTxtKeyTyped

    private void purchaseTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_purchaseTableKeyPressed
          if(evt.getKeyCode()==10){
       int rowindex=purchaseTable.getSelectedRow();
       int colindex=purchaseTable.getSelectedColumn();
       double totalexclu=0;
     
  if(vaidCheck())
{
      if(colindex==5){
   String qty=(purchaseTable.getValueAt(rowindex,4).toString());
String unitcost=(purchaseTable.getValueAt(rowindex,5).toString());

if(isNumeric(qty)){
if(isNumeric(unitcost)){
     double subtotal=Double.parseDouble(String.valueOf(purchaseTable.getValueAt(rowindex, 4)))*
    Double.parseDouble(String.valueOf(purchaseTable.getValueAt(rowindex, 5)))  ; 
     purchaseTable.setValueAt(formatter.format(subtotal), rowindex, 6); 
     int row=purchaseTable.getRowCount();
     
     
purchasetableModel.addRow(new Object[]{false, row+1,"","","","","",""});
   purchaseTable.editCellAt(rowindex+1, 2);
 
}
else{
JOptionPane.showMessageDialog(null, "Please enter a valid Unit Cost","Invalid Unit Cost",JOptionPane.ERROR_MESSAGE);
}
}
else{
    System.out.println(isNumeric(qty)); 
JOptionPane.showMessageDialog(null, " Quantity and Unit cost must be valid numbers!","Invalid Entries",JOptionPane.ERROR_MESSAGE);
}
    }
}
else
{
JOptionPane.showMessageDialog(null,"Please fill in all the empty fields !","Alert",JOptionPane.WARNING_MESSAGE);
}
    totalsCalculator(); 
  // studregTable.setSurrendersFocusOnKeystroke(true);
//        studregTable.getEditorComponent().requestFocus();
       }
    }//GEN-LAST:event_purchaseTableKeyPressed
public void totalsCalculator(){
 int row=purchaseTable.getRowCount(); double totalexclu=0;
       for(int f=0;f<row;f++){
   totalexclu=totalexclu+Double.valueOf(String.valueOf(purchaseTable.getValueAt(f, 6)));
   }
   totalvaluevatexTxt.setText(currencyTxt.getText()+" "+df1.format(totalexclu)); 
   double totalval;
   totalval=((Double.parseDouble(vatTxt.getText())+100)/100)*totalexclu;
    totalvaluevatinclTxt.setText(currencyTxt.getText()+" "+df1.format(totalval)); 

}
    private void purchaseTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_purchaseTableInputMethodTextChanged

    }//GEN-LAST:event_purchaseTableInputMethodTextChanged

    private void purchaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_purchaseTableMouseClicked
      int row=purchaseTable.getSelectedColumn();
      if(row==0){
   {       
int choice=  JOptionPane.showConfirmDialog(null, "Remove Selected Item?","Confirm",JOptionPane.YES_NO_OPTION);
  if(choice==JOptionPane.YES_OPTION){
  purchasetableModel.removeRow(row); 
  }}
  }
      else{
   int rows=purchaseTable.getRowCount();
         if(vaidCheck())
  for(int f=0;f<rows;f++){

 String qty=(purchaseTable.getValueAt(f,4).toString());
String unitcost=(purchaseTable.getValueAt(f,5).toString());
//System.out.println("Value ="+om+ " and Length :"+om.length());
if(isNumeric(qty)){
if(isNumeric(unitcost)){
     double subtotal=Double.parseDouble(String.valueOf(purchaseTable.getValueAt(f, 4)))*
    Double.parseDouble(String.valueOf(purchaseTable.getValueAt(f, 5)))  ; 
     purchaseTable.setValueAt(subtotal, f, 6); 

}
}
 }    
    }    
    }//GEN-LAST:event_purchaseTableMouseClicked

    private void jPanel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseExited
     int rows=purchaseTable.getRowCount();    double subtotal;
         if(vaidCheck()){
          
  for(int f=0;f<rows;f++){
  subtotal=Double.parseDouble(String.valueOf(purchaseTable.getValueAt(f, 4)))*
    Double.parseDouble(String.valueOf(purchaseTable.getValueAt(f, 5)))  ; 
     purchaseTable.setValueAt((subtotal), f, 6);        
   }       
         }      
    }//GEN-LAST:event_jPanel3MouseExited

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     printCSR();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void csrTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_csrTableMouseClicked
 int r=csrTable.getSelectedRow();
            SELECTEDcsrnum=String.valueOf(csrTable.getValueAt(r, 2));
            getClients();      
        try {
           
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
    String getCSr=" SELECT CSRNO,DESCRIPTION,CSRDATE,PODATE,PONUM,CURRENCY,CSRVALUE,VAT,SOLDBY,INVOICE_NO FROM SUPPLY_REQUESTS WHERE CSRNO='"+SELECTEDcsrnum+"'";
   PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getCSr);
   ResultSet rst=pst.executeQuery(); int i=0; int g=0;
   while(rst.next()){
   csrnumTxt.setText(rst.getString(1)); ponumTxt.setText(rst.getString(5)); descripTxt.setText(rst.getString(2));
   CSRdateTxt.setText(sdf.format(rst.getDate(3))); POdateTxt.setText(sdf.format(rst.getDate(4))); vatTxt.setText(String.valueOf(rst.getDouble(8))); 
   currencyTxt .setText(rst.getString(6)); soldbyTxt.setText(rst.getString(9));  invoicenoTxt.setText(rst.getString(10)); 
  g++;
   }
   
   int j=purchaseTable.getRowCount();
  for(int k=0;k<j;k++){
  purchasetableModel.removeRow(0);
  }
  
  String getcsrs="SELECT * FROM CSRITEMS WHERE CSRNO='"+SELECTEDcsrnum+"' ORDER BY QTY desc"; 
   PreparedStatement csrpst2=(PreparedStatement)connectDb.prepareStatement(getcsrs);
   ResultSet csrrst2=csrpst2.executeQuery();  
     while(csrrst2.next()){
  purchasetableModel.addRow(new Object[]{false,i+1,csrrst2.getString(2),csrrst2.getString(3),csrrst2.getInt(4), (csrrst2.getDouble(5)),
 (csrrst2.getInt(4)*csrrst2.getDouble(5)) });  
       i++; 
    }
   
    
   if(i<1){
purchasetableModel.addRow(new Object[]{false,i+1,"","","","", ""}); 
     }
     
     totalsCalculator();    
        } 
   
        
        catch (SQLException ex) {
            Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_csrTableMouseClicked

    private void purchaseTableAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_purchaseTableAncestorMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_purchaseTableAncestorMoved

    private void purchaseTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_purchaseTableKeyReleased
     TableCellEditor tce=purchaseTable.getCellEditor();  double totalsale=0;
if(tce!=null){
tce.stopCellEditing();
//salestableSearch();
 int row=purchaseTable.getRowCount();
           int r=purchaseTable.getSelectedRow();
   if(row>0){
 {    
  if(vaidCheck()){
    double qtysale=Double.parseDouble(purchaseTable.getValueAt(r, 6).toString());
    double unitprice=Double.parseDouble(purchaseTable.getValueAt(r, 5).toString());
    double subtotal=qtysale*unitprice;
   purchaseTable.setValueAt(formatter.format(subtotal), r, 7);  
 
totalsale=totalsale+(Double.parseDouble(String.valueOf(purchaseTable.getValueAt(r, 5)))*Double.parseDouble(String.valueOf(purchaseTable.getValueAt(r, 4))));
 purchaseTable.setValueAt(totalsale, r, 6);
  }
 }
 
   }
}
    }//GEN-LAST:event_purchaseTableKeyReleased

    private void searchTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTxtMouseClicked
     searchTxt.setText(null); 
    }//GEN-LAST:event_searchTxtMouseClicked

    private void searchTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTxtKeyReleased
    getCSR();
    }//GEN-LAST:event_searchTxtKeyReleased

   public boolean validateMarks(){
   if(purchaseTable.getCellEditor()!=null){
purchaseTable.getCellEditor().stopCellEditing();
}
for(int i=0;i< purchaseTable.getRowCount();i++)
{
for (int j=3;j<=4;j++)
{
    try{
String qty=(purchaseTable.getValueAt(i,3).toString());
String unitcost=(purchaseTable.getValueAt(i,4).toString());
//System.out.println("Value ="+om+ " and Length :"+om.length());
if(isNumeric(qty)){
if(isNumeric(unitcost)){

}
else{
JOptionPane.showMessageDialog(null, "Please enter a valid Unit Cost","Invalid Unit Cost",JOptionPane.ERROR_MESSAGE);
}
}
else{
JOptionPane.showMessageDialog(null, "Please enter a valid Quantity ?","Quantity Cost",JOptionPane.ERROR_MESSAGE);
}
  
    }

    catch(NullPointerException ex){
   // JOptionPane.showMessageDialog(null, "Cell is empty !");
    }

}
}
return true;

} 
 
public static boolean isNumeric(String str){
return str.matches("-?\\d+(\\.\\d+)?");
}   
   
    public void getClients(){
        try {
                String getcontractsql;
  if(SELECTEDcsrnum!=null){
   getcontractsql="SELECT SUPPLY_REQUESTS.CLIENTNO,CLIENTS.CLIENT_NO, CLIENTS.CLIENTNAME,CLIENTS.CLIENT_NO,CLIENTS.POBOX,CLIENTS.TOWN,CLIENTS.CONT_PERSON,"
           + "CLIENTS.MOBILE, CLIENTS.EMAIL FROM SUPPLY_REQUESTS LEFT JOIN CLIENTS "
           + " ON SUPPLY_REQUESTS.CLIENTNO=CLIENTS.CLIENT_NO "
           + "WHERE SUPPLY_REQUESTS.CSRNO= "
                    + " '"+SELECTEDcsrnum+"'";
  }              
  else{  getcontractsql="SELECT SUPPLY_REQUESTS.CLIENTNO,CLIENTS.CLIENT_NO, CLIENTS.CLIENTNAME,CLIENTS.POBOX,CLIENTS.TOWN,CLIENTS.CONT_PERSON,"
           + "CLIENTS.MOBILE, CLIENTS.EMAIL FROM SUPPLY_REQUESTS LEFT JOIN CLIENTS "
           + " ON SUPPLY_REQUESTS.CLIENTNO=CLIENTS.CLIENT_NO "
           + "WHERE CLIENTS.CLIENTNAME LIKE "
                    + " '"+ cleintnameTxt.getText()+"%' ORDER BY CLIENTS.CLIENTNAME DESC";
  }
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
            ResultSet rst=pst.executeQuery(); int i=0;
         
            while(rst.next()){
   clientsname=rst.getString(3);
    if(SELECTEDcsrnum!=null){
        cleintnameTxt.setText(clientsname); 
    }  
   cleintnoTxt.setText(rst.getString(2));
      addressTxt.setText(rst.getString(4)); 
    townTxt.setText(rst.getString(5));  contactpersonTxt.setText(rst.getString(6));  
     telephoneTxt.setText(rst.getString(7));  emailTxt.setText(rst.getString(8)); 
                i++;  
            }
            System.out.println("Client found status "+i);
            if(i<1){
   String getclient="SELECT CLIENTNAME,CLIENT_NO, POBOX, EMAIL, CONT_PERSON, MOBILE, TOWN FROM CLIENTS WHERE CLIENTNAME LIKE "
                    + "'"+ cleintnameTxt.getText()+"%' ORDER BY  CLIENTNAME DESC";         
  PreparedStatement    pst3=(PreparedStatement)connectDb.prepareStatement(getclient);      
       ResultSet rst2=pst3.executeQuery(); int j=0;
        while(rst2.next()){
   clientsname=rst2.getString(1);
    cleintnoTxt.setText(rst2.getString(2));
      addressTxt.setText(rst2.getString(3)); 
       emailTxt.setText(rst2.getString(4)); 
       contactpersonTxt.setText(rst2.getString(5));
        telephoneTxt.setText(rst2.getString(6)); 
    townTxt.setText(rst2.getString(7));  
       j++;  
            }
           System.out.println("Client found status "+j);
        if(j<1)
        {
          cleintnoTxt.setText(null);  addressTxt.setText(null); 
    townTxt.setText(null);  contactpersonTxt.setText(null);  
     telephoneTxt.setText(null);  emailTxt.setText(null);    
      }
            }
        }
        catch (SQLException ex) {
            Logger.getLogger(Calls.class.getName()).log(Level.SEVERE, null, ex);
        }
}
    
   public void   printCSR(){
 if(cleintnameTxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(null,"Please enter client name!","Client Number Required",JOptionPane.WARNING_MESSAGE);
        }else  if(csrnumTxt.getText().isEmpty()){
                JOptionPane.showMessageDialog(null,"Please enter Supply Request number!","Supply Request Number Required",JOptionPane.WARNING_MESSAGE);
            }
        else{
     try {
         String getusersql="SELECT CSRNO FROM SUPPLY_REQUESTS WHERE CSRNO='"+csrnumTxt.getText()+"'";
         Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
         PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getusersql);
         ResultSet rst3=pst.executeQuery(); int i=0;
         while(rst3.next()){
             i++;
         }
         if(i<1){
 JOptionPane.showMessageDialog(null,"Supply Request Number "+csrnumTxt.getText()+" must be created first!","Supply Request Not Found",JOptionPane.WARNING_MESSAGE);
         }
         else{
            int r= purchaseTable.getRowCount();
    if(r<1){
JOptionPane.showMessageDialog(null, "Please select a Supply Request from Supply Request List below!","No CSR Selected",JOptionPane.WARNING_MESSAGE);
    }else{
     FileOutputStream filename=null; 
     receiptDoc=new Document(PageSize.A4 ); 
      JFileChooser filesaver=new JFileChooser();
       filesaver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          int option=filesaver.showSaveDialog(csrPanel); 
          
          try {
        String   dir=filesaver.getSelectedFile().toString();
        try {
           
          String sqllogo="SELECT LOGO FROM SETTINGS";
            com.mysql.jdbc.PreparedStatement pstlogo=(com.mysql.jdbc.PreparedStatement) connectDb.prepareStatement(sqllogo);
            ResultSet rst=pstlogo.executeQuery();
            
            if(rst!=null){
            while(rst.next()){
            byte[] byt = null;
            byt=rst.getBytes(1);
            companylogo = Toolkit.getDefaultToolkit().createImage(byt);
            }
            }
          String printdate=new SimpleDateFormat("dd MMM, yyyy").format(Calendar.getInstance().getTime()); 
      int year=LocalDate.now().getYear();
       directory=dir+"/TS"+year+"-"+(lastcsr+1)+" "+cleintnameTxt.getText()+" .pdf";
    filename = new FileOutputStream(directory);
            
   PdfWriter writer=PdfWriter.getInstance(receiptDoc ,filename);
            receiptDoc.open();
            Paragraph space=new Paragraph("          ");
            com.itextpdf.text.Font font1=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,22,Font.BOLD);
            com.itextpdf.text.Font font2=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,8,Font.BOLD);
            com.itextpdf.text.Font font3=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,18,Font.BOLD);
            com.itextpdf.text.Font font4=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.HELVETICA,8,Font.LAYOUT_LEFT_TO_RIGHT);
             com.itextpdf.text.Font font5=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.COURIER,9,Font.LAYOUT_LEFT_TO_RIGHT);
             
      com.itextpdf.text.Font font6=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.COURIER,12,Font.LAYOUT_LEFT_TO_RIGHT); 
      com.itextpdf.text.Font font7=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,12,Font.BOLD);   
          com.itextpdf.text.Font font8=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,9,Font.BOLD);      
           
            
          com.itextpdf.text.Image image = com.itextpdf.text.Image.getInstance(  companylogo , null); 
image.setAbsolutePosition(05, 780);
         image.scaleToFit(150,50);
 writer.getDirectContent().addImage(image);  receiptDoc.add(space);  // receiptDoc.add(space); 
  
            //Paragraph schname=new Paragraph( sacconame,font4); schname.setAlignment(Paragraph.ALIGN_CENTER);
              String separator="______________________________________________________________________________";
            Paragraph separatorlable=new Paragraph(separator,font2);
               separatorlable.setAlignment(Paragraph.ALIGN_CENTER);
              //  receiptDoc.add(separatorlable);
 String separator2="  __________________________________________________________________________________________________________________________________";
            Paragraph separatorlable3=new Paragraph(separator2,font2);
               separatorlable3.setAlignment(Paragraph.ALIGN_CENTER);
               
            Paragraph receiptlabel=new Paragraph("TECHNICAL SERVICE DEPARTMENT     ",font1);
            receiptlabel.setAlignment(Paragraph.ALIGN_CENTER);  receiptDoc.add(receiptlabel);
             receiptDoc.add(separatorlable3); 
        // receiptDoc.add(space);
         
     Paragraph receiptlabel2=new Paragraph("  CUSTOMER SUPPLY REQUEST",font3);
                receiptlabel2.setAlignment(Paragraph.ALIGN_CENTER);
  receiptDoc.add(receiptlabel2);      //   receiptDoc.add(separatorlable3);
 // receiptDoc.add(space);
  
   Paragraph date=new Paragraph( "DATE: "+printdate,font6);
 date.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT); 
   date.setAlignment(Paragraph.ALIGN_LEFT);
           receiptDoc.add(date);
            
   Paragraph paras1345=new Paragraph("CSR NO: "+csrnumTxt.getText(),font6);
   paras1345.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT); 
 paras1345.setAlignment(Paragraph.ALIGN_LEFT);
   receiptDoc.add(paras1345); receiptDoc.add(space);
   
   
          float[] colswidth4=new float[]{15f,9f,9f};
   PdfPTable colstable2=new PdfPTable(colswidth4);
     colstable2 .setWidthPercentage(100);//colstable.setHorizontalAlignment();
      colstable2.setHorizontalAlignment(Element.ALIGN_CENTER);  
   
       Paragraph paras102=new Paragraph("CUSTOMER NAME & ADDRESS"+"",font6);  
 PdfPCell cell320=new PdfPCell( new Phrase("CUSTOMER NAME & ADDRESS"+"",font6));    cell320.setBorder(Rectangle.NO_BORDER);
  colstable2.addCell(cell320);  
  
   Paragraph paras103=new Paragraph("ORDER NO"+"",font6);  
 PdfPCell cell321=new PdfPCell( new Phrase("ORDER NO"+"",font6));    cell321.setBorder(Rectangle.NO_BORDER);
  colstable2.addCell(cell321);  
  
    Paragraph paras104=new Paragraph("DATED"+"",font6);  
 PdfPCell cell322=new PdfPCell( new Phrase("DATED"+"",font6));    cell322.setBorder(Rectangle.NO_BORDER);
  colstable2.addCell(cell322);  
  
   PdfPCell cell323=new PdfPCell( new Phrase(" "));    cell323.setBorder(Rectangle.NO_BORDER);
   cell323.setColspan(3); colstable2.addCell(cell323);  
   
   Paragraph paras1=new Paragraph(cleintnameTxt.getText()+",",font6);  
  paras1.setAlignment(Paragraph.ALIGN_CENTER);  paras1.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);   
  PdfPCell cell31=new PdfPCell(paras1);
  cell31.setBorder(Rectangle.NO_BORDER); 
 colstable2.addCell(cell31); 
 
  Paragraph paras12=new Paragraph(" "+ponumTxt.getText(),font6);paras12.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT); 
     paras12.setAlignment(Paragraph.ALIGN_CENTER); 
      PdfPCell cell2=new PdfPCell(paras12); cell2.setBorder(Rectangle.NO_BORDER);  
  colstable2.addCell(cell2); 
   
    Paragraph paras13=new Paragraph(""+POdateTxt.getText(),font6);paras12.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT); 
     paras13.setAlignment(Paragraph.ALIGN_CENTER); 
      PdfPCell cell3=new PdfPCell(paras13); cell3.setBorder(Rectangle.NO_BORDER);  
  colstable2.addCell(cell3); 
  
  
 Paragraph paras131=new Paragraph("P.O. BOX "+addressTxt.getText()+",",font6);paras131.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT); 
   paras131.setAlignment(Paragraph.ALIGN_CENTER);   
    PdfPCell cell23=new PdfPCell(paras131);cell23.setBorder(Rectangle.NO_BORDER);  
   colstable2.addCell(cell23 ); 
   
    PdfPCell cell324=new PdfPCell( new Phrase(" "));    cell324.setBorder(Rectangle.NO_BORDER);
   cell324.setColspan(2); colstable2.addCell(cell324); 

   Paragraph paras15=new Paragraph(townTxt.getText()+".",font6);paras15.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT); 
           paras15.setAlignment(Paragraph.ALIGN_CENTER);   
 PdfPCell cell5=new PdfPCell(paras15);cell5.setBorder(Rectangle.NO_BORDER);  
  colstable2.addCell(cell5); 
  
   colstable2.addCell(cell324); 
 
   receiptDoc.add(colstable2);  //receiptDoc.add(space);
 
 
   float[] colswidth;      com.itextpdf.text.pdf.PdfPTable subjreportTable = null;
  float[] colswidth2=new float[]{15f};
   PdfPTable colstable=new PdfPTable(colswidth2);
     colstable .setWidthPercentage(100);//colstable.setHorizontalAlignment();
      colstable.setHorizontalAlignment(Element.ALIGN_CENTER); 
      
  receiptDoc.add(space); //receiptDoc.add(space);
  
   Paragraph paras116=new Paragraph("CONTACT PERSON:  "+contactpersonTxt.getText() ,font5);paras116.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);   
   paras116.setAlignment(Paragraph.ALIGN_LEFT);  
    receiptDoc.add(paras116);
  
     Paragraph paras117=new Paragraph("PHONE: "+telephoneTxt.getText() ,font5);paras116.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);   
   paras117.setAlignment(Paragraph.ALIGN_LEFT);  
    receiptDoc.add(paras117);
    
       Paragraph paras118=new Paragraph("EMAIL: "+emailTxt.getText().toLowerCase() ,font5);paras116.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);   
   paras118.setAlignment(Paragraph.ALIGN_LEFT);  
    receiptDoc.add(paras118);
    
      receiptDoc.add(space);
  Paragraph paras16=new Paragraph("ORDER DETAILS:  "+descripTxt.getText(),font7);paras16.getFont().setStyle(Font.LAYOUT_RIGHT_TO_LEFT);   
   paras16.setAlignment(Paragraph.ALIGN_LEFT);  
    receiptDoc.add(paras16);  receiptDoc.add(space); 
  //receiptDoc.add(separatorlable3);  
       colswidth = new float[]{2f,4f,9f,3f,4f,4f  };
       subjreportTable=new  com.itextpdf.text.pdf.PdfPTable(colswidth);
          subjreportTable .setWidthPercentage(100);  
 
           Paragraph Paras=new Paragraph("No",font2);
            Paras.getFont().setStyle(Font.BOLD);
            
    Paragraph Paras1=new Paragraph("PART NO.",font2);
            Paras1.getFont().setStyle(Font.BOLD);
            
              Paragraph Paras12=new Paragraph("DESCRIPTION",font2);
            Paras12.getFont().setStyle(Font.BOLD);
            
            Paragraph Paras21=new Paragraph("QTY.",font2);
            Paras21.getFont().setStyle(Font.BOLD);
            
             Paragraph Paras22=new Paragraph("UNIT COST",font2);
            Paras22.getFont().setStyle(Font.BOLD);
            
      Paragraph Paras11=new Paragraph("TOTAL",font2);
            Paras11.getFont().setStyle(Font.BOLD);
   subjreportTable.addCell(Paras);   subjreportTable.addCell(Paras1);
  subjreportTable.addCell(Paras12);  subjreportTable.addCell(Paras21);  
  subjreportTable.addCell(Paras22);subjreportTable.addCell(Paras11); 
   
 String PARTNO, description,qty ;
 double unitcost,subcost, totalexcluvat=0;
  int n=purchaseTable.getRowCount();
  
  PdfPCell cellspanner=new PdfPCell();
 cellspanner.setColspan(4); //cellspanner.setBorder(Rectangle.NO_BORDER);  
    for(int z=0;z<n;z++){
   PARTNO= String.valueOf(purchaseTable.getValueAt(z , 2));
  description=String.valueOf(purchaseTable.getValueAt(z ,3));
     qty=String.valueOf(purchaseTable.getValueAt(z ,4)); 
    unitcost= Double.parseDouble(String.valueOf(purchaseTable.getValueAt(z, 5)));
    
   subcost=Double.parseDouble(String.valueOf(qty))* unitcost;
      totalexcluvat=totalexcluvat+subcost;
      
Paragraph Paras110=new Paragraph(String.valueOf(z+1),font5);
Paras11.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
 
          Paragraph Paras211=new Paragraph(PARTNO,font5);
          Paras211.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
             Paragraph Paras2111=new Paragraph(description,font5);
                Paras2111.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras330=new Paragraph( (qty),font5);
                Paras330.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras341=new Paragraph(currencyTxt.getText()+". "+String.valueOf(formatter.format(unitcost)),font5);
                Paras341.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                 Paragraph Paras311=new Paragraph(currencyTxt.getText()+". "+String.valueOf(formatter.format(subcost)),font5);
                Paras311.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
          subjreportTable.addCell(Paras110);subjreportTable.addCell(Paras211);
            subjreportTable.addCell(Paras2111); subjreportTable.addCell(Paras330);
         subjreportTable.addCell(Paras341);      subjreportTable.addCell(Paras311);
            }
   
    //  subjreportTable.addCell(space);   subjreportTable.addCell(space); 
     //   subjreportTable.addCell(space); 
     PdfPCell cellspanner2=new PdfPCell();
 cellspanner2.setColspan(6);  subjreportTable.addCell(cellspanner2);   
 
   subjreportTable.addCell(cellspanner); 
     Paragraph Paras311=new Paragraph("Sub Total "+". ",font8);
    Paras311.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
       subjreportTable.addCell(Paras311);  
       
    Paragraph Paras312=new Paragraph(currencyTxt.getText()+". "+formatter.format(totalexcluvat),font8);
    Paras312.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
       subjreportTable.addCell(Paras312);   
       
   subjreportTable.addCell(cellspanner);  // subjreportTable.addCell(space);   subjreportTable.addCell(space); 
  // subjreportTable.addCell(space);
   
    Paragraph Paras313=new Paragraph("VAT "+vatTxt.getText()+" %",font8);
    Paras313.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
       subjreportTable.addCell(Paras313);  
       
  double vatamount=  totalexcluvat*(Double.parseDouble(String.valueOf(vatTxt.getText()))/100);
       Paragraph Paras314=new Paragraph(currencyTxt.getText()+". "+formatter.format(vatamount)+" ",font8);
    Paras314.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
       subjreportTable.addCell(Paras314); 
 
 
  subjreportTable.addCell(cellspanner);  //subjreportTable.addCell(space);    subjreportTable.addCell(space);   subjreportTable.addCell(space); 
  
  
     Paragraph Paras315=new Paragraph("Grand Total:. ",font8);
    Paras315.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
       subjreportTable.addCell(Paras315); 
       
      
         Paragraph Paras316=new Paragraph(currencyTxt.getText()+". "+(formatter.format(totalexcluvat+vatamount)),font8);
    Paras316.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
       subjreportTable.addCell(Paras316);
       
 
 
receiptDoc.add(subjreportTable);
 receiptDoc.add( space);
   receiptDoc.add( space);
    
     float[] colswidth6=new float[]{5f,5f,5f,5f};     
 PdfPTable signatureTable=new PdfPTable(colswidth6);
 signatureTable.setWidthPercentage(90); 
 signatureTable.setHorizontalAlignment(Element.ALIGN_LEFT);  

  PdfPCell cell29=new PdfPCell(new Phrase(" ")); 
 
     Paragraph sign562=new Paragraph("Title " ,font2);
   sign562.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell283=new PdfPCell(sign562); 
    signatureTable.addCell(cell283);
  
     Paragraph sign563=new Paragraph("Name & Signature" ,font2);
   PdfPCell cell325=new PdfPCell( new Phrase(sign563));    //cell324.setBorder(Rectangle.NO_BORDER);
   cell325.setColspan(4); colstable2.addCell(cell325); 
    
    PdfPCell cell281=new PdfPCell(new Phrase("Name",font2) ); 
    signatureTable.addCell(cell281);
    
       PdfPCell cell282=new PdfPCell(new Phrase("Signature ",font2)); 
    signatureTable.addCell(cell282);
 
      Paragraph signr=new Paragraph("Date" ,font2);  
    PdfPCell cell284=new PdfPCell(signr); 
    signatureTable.addCell(cell284);
    
    Paragraph sign5=new Paragraph("Sales Person" ,font2);
   sign5.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell27=new PdfPCell(sign5);//cell27.setBorder(Rectangle.NO_BORDER);
    signatureTable.addCell(cell27); 
    
     Paragraph sign56=new Paragraph(soldbyTxt.getText() ,font2);
   sign56.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell289=new PdfPCell(sign56);//cell289.setBorder(Rectangle.NO_BORDER);
    signatureTable.addCell(cell289); 
    
       signatureTable.addCell(cell29);
          signatureTable.addCell(cell29);
    
       
            Paragraph signf=new Paragraph("Field Service Manager" ,font2);  
      PdfPCell cell287=new PdfPCell(signf ); 
    signatureTable.addCell(cell287);
    
       Paragraph signf1=new Paragraph(FSM ,font2);  
      PdfPCell cell28F=new PdfPCell(signf1 ); 
    signatureTable.addCell(cell28F); 
      signatureTable.addCell(cell29);    signatureTable.addCell(cell29); 
      
      
   Paragraph signgm=new Paragraph("General Manager" ,font2);  
      PdfPCell cell28gm=new PdfPCell(signgm ); 
    signatureTable.addCell(cell28gm); 
    
      Paragraph signfgm1=new Paragraph(GM ,font2);  
      PdfPCell cell28g=new PdfPCell(signfgm1 ); 
    signatureTable.addCell(cell28g); 
    signatureTable.addCell(cell29);    signatureTable.addCell(cell29); 
    
      Paragraph signCFO=new Paragraph("Chief Finance Officer" ,font2);  
      PdfPCell cell28CFO=new PdfPCell(signCFO ); 
    signatureTable.addCell(cell28CFO); 
    
     Paragraph signcfo=new Paragraph(CFO ,font2);  
      PdfPCell cell28cfo=new PdfPCell(signcfo ); 
    signatureTable.addCell(cell28cfo); 
    signatureTable.addCell(cell29);    signatureTable.addCell(cell29); 
    
       Paragraph signCEO=new Paragraph("Chief Executive Officer" ,font2);  
      PdfPCell cell28CEO=new PdfPCell(signCEO ); 
    signatureTable.addCell(cell28CEO); 
    
     Paragraph signceo=new Paragraph(CEO ,font2);  
      PdfPCell cell28ceo=new PdfPCell(signceo ); 
    signatureTable.addCell(cell28ceo); 
    signatureTable.addCell(cell29);    signatureTable.addCell(cell29); 
    
   receiptDoc.add(signatureTable);  
   
   receiptDoc.add(space); //receiptDoc.add(space);receiptDoc.add(space);
   
    Paragraph NOTE=new Paragraph(" NOTE: ",font2);
            NOTE.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE);
     
      Paragraph NOTE4=new Paragraph("1.CEO's approval is given here for Order, Customer, Terms and Margins.",font4);
     NOTE4.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE4); 
     
        Paragraph NOTE41=new Paragraph("2.Details to be cross-checked and cleared by Finance Department.",font4);
     NOTE41.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE41); 
     
      Paragraph NOTE11=new Paragraph(" TERMS: ",font2);
            NOTE11.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE11);
     
    Paragraph NOTE2=new Paragraph("PRICE: As listed above in "+currencyTxt.getText()+". Grand Total is inclusive of "+vatTxt.getText()+" % VAT. ",font4);
     NOTE2.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE2); 
     
   Paragraph NOTE3=new Paragraph("PAYMENT: Payment is within 30 days after service delivery and upon receipt of invoice.",font4);
     NOTE3.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE3); 
    
      
     
     receiptDoc.add(space);  receiptDoc.add(space);
  
 //receiptDoc.add(space); receiptDoc.add(space);receiptDoc.add(space);
   
   receiptDoc.add(space);
     
   Paragraph user=new Paragraph("TECHNICAL SERVICE DEPARTMENT                                      System Generated By: "+currentuser+" on "+printdate,font4);
            user.setAlignment(Paragraph.ALIGN_CENTER);
            receiptDoc.add(user);
            receiptDoc.close();
            
            
        }   catch (SQLException | DocumentException | FileNotFoundException ex) {
            Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Executable.openDocument(directory);
        
    }   catch (IOException ex) {
              Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
          }
    }

         
         }   
     } catch (SQLException ex) {
         Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
     }
        }
  
  }    
    
 public void getCSRStaff(){
        try {
            String getstaffsql; PreparedStatement pst;
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            getstaffsql="SELECT STAFFNAME FROM STAFF WHERE POST='FIELD SERVICE MANAGER'";
            pst=(PreparedStatement)connectDb.prepareStatement(getstaffsql);
            ResultSet rst=pst.executeQuery();
            while(rst.next()){
           FSM=rst.getString(1);
            }
            getstaffsql="SELECT STAFFNAME FROM STAFF WHERE POST='GENERAL MANAGER'";
            pst=(PreparedStatement)connectDb.prepareStatement(getstaffsql);
             ResultSet rst1=pst.executeQuery();
            while(rst1.next()){
           GM=rst1.getString(1);
            }
            getstaffsql="SELECT STAFFNAME FROM STAFF WHERE POST='CHIEF FINANCE OFFICER'";
            pst=(PreparedStatement)connectDb.prepareStatement(getstaffsql);
             ResultSet rst2=pst.executeQuery();
            while(rst2.next()){
        CFO=rst2.getString(1);
            }
            getstaffsql="SELECT STAFFNAME FROM STAFF WHERE POST='CHIEF EXECUTIVE OFFICER'";
            pst=(PreparedStatement)connectDb.prepareStatement(getstaffsql);
             ResultSet rst4=pst.executeQuery();
            while(rst4.next()){
          CEO=rst4.getString(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Supplyrequest.class.getName()).log(Level.SEVERE, null, ex);
        }
 
 
 }   
    /**
     * @param args the command line arguments
     */
 
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CSRdateTxt;
    private javax.swing.JTextField POdateTxt;
    private javax.swing.JTextField addressTxt;
    private javax.swing.JTextField cleintnameTxt;
    private javax.swing.JTextField cleintnoTxt;
    public javax.swing.JPanel clientPanel2;
    private javax.swing.JTextField contactpersonTxt;
    public javax.swing.JPanel csrPanel;
    private javax.swing.JTable csrTable;
    private org.jdesktop.swingx.JXDatePicker csrdatePicker;
    private javax.swing.JTextField csrnumTxt;
    private javax.swing.JComboBox<String> currencyCombo;
    private javax.swing.JTextField currencyTxt;
    private javax.swing.JTextField descripTxt;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JTextField invoicenoTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXDatePicker orderdatePicker;
    private javax.swing.JTextField ponumTxt;
    private javax.swing.JTable purchaseTable;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JComboBox<String> soldbyCombo;
    private javax.swing.JTextField soldbyTxt;
    private javax.swing.JTextField telephoneTxt;
    private javax.swing.JTextField totalvaluevatexTxt;
    private javax.swing.JTextField totalvaluevatinclTxt;
    private javax.swing.JTextField townTxt;
    private javax.swing.JTextField vatTxt;
    // End of variables declaration//GEN-END:variables
}
