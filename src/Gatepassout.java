
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.tools.Executable;
import java.awt.Font;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.joda.time.LocalDate;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author JOE
 */
public class Gatepassout extends javax.swing.JFrame {
    String currentuser; SimpleDateFormat sdf=new SimpleDateFormat("dd MMM,yyyy");
     SimpleDateFormat sdf2=new SimpleDateFormat("yyyy-MM-dd");
     java.sql.Date servicedate;   String staffname;String printedby;       Image companylogo;
 String usertype;String directory;
  String idno,phone;
 String[] cols2={"No.","GIN NO","DATE IN","CLIENT","MODEL","DESCRIPTION","SERIAL NO.","FAULT","WARRANTY","DATE OUT","TAKEN BY"};   
   DefaultTableModel  equipmentlisttableModel=new DefaultTableModel(cols2,0){
   @Override
   public boolean isCellEditable(int row,int column){
        return column == 0;
   }
    }; 
       Document   receiptDoc; String collectedby;
 //  String[] cols ={"No.","GIN NO","CLIENT","MODEL","DESCRIPTION","SERIAL NO.","FAULT","SERVICED","ACTION TAKEN","STATUS"};   
   String[] cols ={"No.","GINNO","DATE IN","CLIENT","MODEL","DESCRIPTION","SERIAL NO.","FAULT","SERVICED","CALL NO","ASSIGNED","ACTION","STATUS"};   
   DefaultTableModel  collectiontableModel=new DefaultTableModel(cols ,0);
   
 String clientname;Home access=new Home();   
    /**
     * Creates new form Gatepassout
     */
    public Gatepassout() {
        initComponents();
      collectionTable.getTableHeader().setReorderingAllowed(false);
  collectionTable.getColumnModel().getColumn(0).setPreferredWidth(1);
         
      equiplistTable.getTableHeader().setReorderingAllowed(false);
         equiplistTable.getColumnModel().getColumn(0).setPreferredWidth(1);
           
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gatepassoutPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        collectedbyTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        clientnameTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        contpersonTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        phoneTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        collectionTable = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        equiplistTable = new javax.swing.JTable();
        searchserialTxt = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        gatepassoutPanel.setBackground(new java.awt.Color(153, 0, 153));
        gatepassoutPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "GATEPASS OUT", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "COLLECTED BY", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 153))); // NOI18N

        jLabel1.setText("NAME:");

        collectedbyTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                collectedbyTxtMouseExited(evt);
            }
        });
        collectedbyTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                collectedbyTxtKeyReleased(evt);
            }
        });

        jLabel2.setText("PHONE:");

        jLabel3.setText("ID NO:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(79, 79, 79)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(collectedbyTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(collectedbyTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CLIENT DETAILS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 153))); // NOI18N

        jLabel4.setText("CLIENT NAME:");

        clientnameTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientnameTxtMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                clientnameTxtMouseExited(evt);
            }
        });
        clientnameTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientnameTxtKeyReleased(evt);
            }
        });

        jLabel5.setText("CONTACT PERSON:");

        jLabel6.setText("PHONE NO:");

        jLabel7.setText("EMAIL:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clientnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(phoneTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                .addComponent(emailTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(contpersonTxt)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(clientnameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(contpersonTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EQUIPMENT TO COLLECT", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 153))); // NOI18N

        collectionTable.setModel(collectiontableModel);
        collectionTable.setFillsViewportHeight(true);
        collectionTable.setGridColor(new java.awt.Color(153, 0, 153));
        collectionTable.setRowHeight(25);
        collectionTable.setRowMargin(2);
        collectionTable.setSelectionBackground(new java.awt.Color(153, 0, 153));
        collectionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                collectionTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(collectionTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
        );

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EQUIPMENT IN WORKSHOP", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 153))); // NOI18N

        equiplistTable.setModel(equipmentlisttableModel);
        equiplistTable.setFillsViewportHeight(true);
        equiplistTable.setGridColor(new java.awt.Color(204, 0, 204));
        equiplistTable.setRowHeight(25);
        equiplistTable.setRowMargin(2);
        equiplistTable.setSelectionBackground(new java.awt.Color(153, 0, 153));
        equiplistTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                equiplistTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(equiplistTable);

        searchserialTxt.setText("SEARCH SERIAL NUMBER");
        searchserialTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchserialTxtMouseClicked(evt);
            }
        });
        searchserialTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchserialTxtKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchserialTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchserialTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "EQUIPMENT ISSUING", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(153, 0, 153))); // NOI18N

        jButton2.setText("PRINT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Issue");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(78, 78, 78))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(69, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(875, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(196, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(14, 14, 14)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(388, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout gatepassoutPanelLayout = new javax.swing.GroupLayout(gatepassoutPanel);
        gatepassoutPanel.setLayout(gatepassoutPanelLayout);
        gatepassoutPanelLayout.setHorizontalGroup(
            gatepassoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gatepassoutPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        gatepassoutPanelLayout.setVerticalGroup(
            gatepassoutPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gatepassoutPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(gatepassoutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gatepassoutPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void clientnameTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientnameTxtMouseExited
        clientnameTxt.setText(clientname);
    }//GEN-LAST:event_clientnameTxtMouseExited
 public void getEquipment(){
        try {
     String getequipsql;
if(!clientnameTxt.getText().isEmpty()){
 getequipsql="SELECT GATEPASS.GINNO, GATEPASS.DATEIN,  CLIENTS.CLIENTNAME,GATEPASS.MODEL,GATEPASS.DESCRIPTION, "
                    + "GATEPASS.SERIAL_NO,GATEPASS.FAULT,GATEPASS.WARRANTY,GATEPASS.DATEOUT,GATEPASS.TAKENBY  FROM GATEPASS "
                    + "LEFT JOIN CLIENTS ON GATEPASS.CLIENTNO=CLIENTS.CLIENT_NO where CLIENTS.CLIENTNAME LIKE '"+clientnameTxt.getText()+"%' "
         + "ORDER BY GATEPASS.DATEIN DESC";
}else if(!searchserialTxt.getText().equalsIgnoreCase("SEARCH SERIAL NUMBER")){
 getequipsql="SELECT GATEPASS.GINNO, GATEPASS.DATEIN,  CLIENTS.CLIENTNAME,GATEPASS.MODEL,GATEPASS.DESCRIPTION, "
                    + "GATEPASS.SERIAL_NO,GATEPASS.FAULT,GATEPASS.WARRANTY,GATEPASS.DATEOUT,GATEPASS.TAKENBY  FROM GATEPASS "
                    + "LEFT JOIN CLIENTS ON GATEPASS.CLIENTNO=CLIENTS.CLIENT_NO where GATEPASS.SERIAL_NO LIKE '"+searchserialTxt.getText()+"%' "
         + "ORDER BY GATEPASS.DATEIN DESC";
}else{
 getequipsql="SELECT GATEPASS.GINNO, GATEPASS.DATEIN,  CLIENTS.CLIENTNAME,GATEPASS.MODEL,GATEPASS.DESCRIPTION, "
                    + "GATEPASS.SERIAL_NO,GATEPASS.FAULT,GATEPASS.WARRANTY,GATEPASS.DATEOUT,GATEPASS.TAKENBY FROM GATEPASS "
                    + "LEFT JOIN CLIENTS ON GATEPASS.CLIENTNO=CLIENTS.CLIENT_NO   "
         + "ORDER BY GATEPASS.DATEIN DESC";

}
      int row=equiplistTable.getRowCount(); 
      for(int g=0;g<row;g++){
    equipmentlisttableModel.removeRow(0);
      }
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getequipsql);
            ResultSet rst=pst.executeQuery(); int i=0; String dateout1;
             java.sql.Date today2;
            while(rst.next()){
 System.out.println("Date out: "+rst.getString(9)+" collectedby "+rst.getString(10));
 dateout1=rst.getString(9);
 if(!dateout1.equalsIgnoreCase("N/A")){
  today2= java.sql.Date.valueOf(dateout1); 
   equipmentlisttableModel.addRow(new Object[]{i+1,rst.getString(1),sdf.format(rst.getDate(2)),rst.getString(3),rst.getString(4),rst.getString(5),
                rst.getString(6),rst.getString(7),rst.getString(8),sdf.format(today2),rst.getString(10) }); 
 }
 else{
  equipmentlisttableModel.addRow(new Object[]{i+1,rst.getString(1),(rst.getDate(2)),rst.getString(3),rst.getString(4),rst.getString(5),
   rst.getString(6),rst.getString(7),rst.getString(8),(dateout1) ,rst.getString(10) }); 
 }
                 

                i++;  
 
            }
        } catch (SQLException ex) {
            Logger.getLogger(Gatepass.class.getName()).log(Level.SEVERE, null, ex);
        }
 } 
    private void clientnameTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientnameTxtKeyReleased
        try {
            String getcontractsql="SELECT  CLIENTNAME, CONT_PERSON, MOBILE,EMAIL,CLIENT_NO  FROM CLIENTS  WHERE  CLIENTNAME like " +
            " '"+ clientnameTxt.getText()+"%' ORDER BY CLIENTNAME ASC";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
            ResultSet rst=pst.executeQuery(); int i=0;
            while(rst.next()){
                clientname=rst.getString(1);
                contpersonTxt.setText(rst.getString(2));
                phoneTxt.setText(rst.getString(3));
                emailTxt.setText( (rst.getString(4)));
               // clientno=rst.getString(5);
                i++;
            }
       getEquipment();    
            if(i<1){
                clientname=null;
                contpersonTxt.setText(null);
                phoneTxt.setText(null);
                emailTxt.setText(null);
    }
        }  catch (SQLException ex) {
            Logger.getLogger(Gatepass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clientnameTxtKeyReleased

    private void searchserialTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchserialTxtKeyReleased
   getEquipment();
    }//GEN-LAST:event_searchserialTxtKeyReleased

    private void searchserialTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchserialTxtMouseClicked
     searchserialTxt.setText(null);clientnameTxt.setText(null);  clientname=null;
                contpersonTxt.setText(null);
                phoneTxt.setText(null);
                emailTxt.setText(null); 
    }//GEN-LAST:event_searchserialTxtMouseClicked

    private void clientnameTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientnameTxtMouseClicked
   if(!searchserialTxt.getText().equalsIgnoreCase("SEARCH SERIAL NUMBER")){
   searchserialTxt.setText(null);
   } 
 int r= collectionTable.getRowCount();
   for(int y=0;y<r;y++){
      collectiontableModel.removeRow(0);
            }
    }//GEN-LAST:event_clientnameTxtMouseClicked

    private void equiplistTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_equiplistTableMouseClicked
if(clientnameTxt.getText().isEmpty()){
JOptionPane.showMessageDialog(null, "Please enter client name first!","Client Name Required",JOptionPane.ERROR_MESSAGE);
}
else{
        int rows=equiplistTable.getRowCount(); String client1,client2,serial1,serial2,dateout; 
      client1=String.valueOf(equiplistTable.getValueAt(equiplistTable.getSelectedRow(), 3));
     dateout =String.valueOf(equiplistTable.getValueAt(equiplistTable.getSelectedRow(), 9));
      serial1=String.valueOf(equiplistTable.getValueAt(equiplistTable.getSelectedRow(), 6));
      System.out.println("Client 1: "+client1);
      
 if(!dateout.equalsIgnoreCase("N/A")){
 JOptionPane.showMessageDialog(null, "Selected equipment returned to client on "+dateout+" !","Equipment not in Workshop ",JOptionPane.WARNING_MESSAGE);
 }     
 else  if(rows>0){
       
     int r= collectionTable.getRowCount();
   if(r>0){
     
   client2=String.valueOf(collectionTable.getValueAt(0, 3));
   
 System.out.println("Client 2: "+client2);
   if(!client1.equalsIgnoreCase(client2)){
   JOptionPane.showMessageDialog(null, "You cannot prepare same gatepass for different clients!","Wrong Equipment Selected",JOptionPane.ERROR_MESSAGE);
   }
   else{
    
addEquipment();
 equipmentlisttableModel.removeRow(equiplistTable.getSelectedRow()); 
   }
 }
  else{
   addEquipment();equipmentlisttableModel.removeRow(equiplistTable.getSelectedRow()); 
   }
      }
}
    }//GEN-LAST:event_equiplistTableMouseClicked

    public void addEquipment(){
        try {
            int r= collectionTable.getRowCount();
            for(int y=0;y<r;y++){
             //   collectiontableModel.removeRow(0);
            }
                        
            int row=equiplistTable.getSelectedRow();
            String ginno=String.valueOf(equiplistTable.getValueAt(row, 1));
            String serial=String.valueOf(equiplistTable.getValueAt(row, 6));
            String getequipsql="SELECT GATEPASS.GINNO, GATEPASS.DATEIN,  CLIENTS.CLIENTNAME,GATEPASS.MODEL,GATEPASS.DESCRIPTION, " +
                    "GATEPASS.SERIAL_NO,GATEPASS.FAULT,SERVICE.SERVICE_DATE,SERVICE.CALL_NO, CALLS.TECHNICIAN,STAFF.STAFFNAME,SERVICE.ACTION,SERVICE.STATUS FROM GATEPASS " +
                    "        LEFT JOIN CLIENTS ON GATEPASS.CLIENTNO=CLIENTS.CLIENT_NO " +
                    "         LEFT JOIN SERVICE ON GATEPASS.SERIAL_NO=SERVICE.SERIAL " +
                    "        LEFT JOIN CALLS ON SERVICE.CALL_NO = CALLS.CALL_NO"
                    + " LEFT JOIN STAFF ON CALLS.TECHNICIAN=STAFF.STAFFNO "
                    + " WHERE GATEPASS.GINNO='" +ginno+"' and SERVICE.SERIAL= '"+serial+"'"+
                    "         ORDER BY GATEPASS.DATEIN ASC";
            
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getequipsql);
            ResultSet rst=pst.executeQuery(); int i=0;
            while(rst.next()){
                if(rst.getDate(8)==null){
                    collectiontableModel.addRow(new Object[]{r+1,rst.getString(1),sdf.format(rst.getDate(2)),rst.getString(3),rst.getString(4),rst.getString(5),
                        rst.getString(6),rst.getString(7),"NONE","NONE","NONE","NONE","NONE","NONE"});
                    i++;
                } else{
                    collectiontableModel.addRow(new Object[]{r+1,rst.getString(1),sdf.format(rst.getDate(2)),rst.getString(3),rst.getString(4),rst.getString(5),
                        rst.getString(6),rst.getString(7),sdf.format(rst.getDate(8)),rst.getString(9),rst.getString(11),rst.getString(12)
                            ,rst.getString(13)});
                    i++;
                }
                
            }    
     if(i<1){
      int x=collectionTable.getRowCount();
      
     int d=equiplistTable.getSelectedRow();
      String  ginno1= String.valueOf(equiplistTable.getValueAt(d , 1));
    String  datein= String.valueOf(equiplistTable.getValueAt(d , 2));
     String  CLIENT= String.valueOf(equiplistTable.getValueAt(d , 3));
              String  model= String.valueOf(equiplistTable.getValueAt(d , 4));
             String   description=String.valueOf(equiplistTable.getValueAt(d ,5));
            String    serial2=String.valueOf(equiplistTable.getValueAt(d ,6));
           String     fault= (String.valueOf(equiplistTable.getValueAt(d, 7)));
                
                
   collectiontableModel.addRow(new Object[]{x+1,ginno1,datein,CLIENT,model,description,serial2,fault,"NONE","N/A","N/A","N/A","N/A","N/A"});  
     }       
            
        } catch (SQLException ex) {
            Logger.getLogger(Gatepassout.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    
    
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
     printGatepass();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 int r= collectionTable.getRowCount();    String ginno;  
if(clientnameTxt.getText().isEmpty()){
JOptionPane.showMessageDialog(null, "Please enter client name first!","Client Name Required",JOptionPane.ERROR_MESSAGE);
}   
else if(collectedbyTxt.getText().isEmpty()) {
JOptionPane.showMessageDialog(null, "Please enter name of person collecting equipment!","Collector's Name Required",JOptionPane.WARNING_MESSAGE);
 }
else if(jTextField2.getText().isEmpty()) {
JOptionPane.showMessageDialog(null, "Please enter phone number of person collecting equipment!","Collector's Phone number Required",JOptionPane.WARNING_MESSAGE);
 }
else if(jTextField3.getText().isEmpty()) {
JOptionPane.showMessageDialog(null, "Please enter ID number of person collecting equipment!","Collector's ID number Required",JOptionPane.WARNING_MESSAGE);
 }
else if(r<1){
  JOptionPane.showMessageDialog(null, "Please select equipment from the Equipment in Workshop list!","No Equipment Selected",JOptionPane.WARNING_MESSAGE);
       }
        else{
     try {
         PreparedStatement pst;    String getstatus; ResultSet rst;String dateout="";
         String updatesql;
         Connection connectDb=(Connection)DriverManager.getConnection(access.server, access.username,access.dbpword);
     int d=0;
 int choice=JOptionPane.showConfirmDialog(null, "Do you want to issue equipment in Equipment to Collect list?","Confirm",JOptionPane.YES_NO_OPTION);
 if(choice==JOptionPane.YES_OPTION){
         for(int b=0;b<r;b++){
 ginno=collectionTable.getValueAt(b, 1).toString();
 System.out.println("GINNO "+ginno);
             getstatus="SELECT DATEOUT, TAKENBY FROM GATEPASS WHERE GINNO='"+ginno+"'";
             pst=(PreparedStatement)connectDb.prepareStatement(getstatus);
   rst=pst.executeQuery();
   while(rst.next()){
 dateout=rst.getString(1);
   }
System.out.println("date out "+dateout);   
 if(dateout.equalsIgnoreCase("N/A")){
     LocalDate today1=LocalDate.now();
  java.sql.Date today2= java.sql.Date.valueOf(java.time.LocalDate.now()); 
String today=sdf2.format(today2);
 updatesql="UPDATE GATEPASS SET DATEOUT='"+today2+"',TAKENBY='"+collectedbyTxt.getText()+"' WHERE GINNO='"+ginno+"'";
   pst=(PreparedStatement)connectDb.prepareStatement(updatesql);
  d= pst.executeUpdate();
 }  
   }
          if(d>0){
  getEquipment();
  JOptionPane.showMessageDialog(null, "Equipment in Collection list issued successfully!","Successfull",JOptionPane.INFORMATION_MESSAGE);
  printGatepass();

    for(int y=0;y<r;y++){
    collectiontableModel.removeRow(0);
            } 
 collectedby=null;
 jTextField2.setText(null);
  jTextField3.setText(null); 
   }
     
     } 
     }catch (SQLException ex) {
         Logger.getLogger(Gatepassout.class.getName()).log(Level.SEVERE, null, ex);
     }
        } 

    }//GEN-LAST:event_jButton1ActionPerformed

    private void collectedbyTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_collectedbyTxtKeyReleased
  try {
            String getcontractsql="SELECT STAFFNAME,PHONE, STAFFNO FROM STAFF  WHERE STAFFNAME LIKE '"+collectedbyTxt.getText()+"%' ORDER BY STAFFNAME ASC";
            Connection connectDb=(Connection)DriverManager.getConnection( access.server,  access.username, access.dbpword);
            PreparedStatement pst=(PreparedStatement)connectDb.prepareStatement(getcontractsql);
            ResultSet rst=pst.executeQuery(); int i=0;
        while(rst.next()){
 collectedby=rst.getString(1);
 jTextField2.setText(rst.getString(2));
  jTextField3.setText(rst.getString(3));
    i++;  
            }
          if(i<1){ 
        collectedby=null;
 jTextField2.setText(null);
  jTextField3.setText(null);  
          }
     }  catch (SQLException ex) {
            Logger.getLogger(Gatepass.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_collectedbyTxtKeyReleased

    private void collectedbyTxtMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectedbyTxtMouseExited
      if(collectedby!=null){
      collectedbyTxt.setText(collectedby); 
      }
        
    }//GEN-LAST:event_collectedbyTxtMouseExited

    private void collectionTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_collectionTableMouseClicked
       int row=collectionTable.getSelectedRow();
       int choice=JOptionPane.showConfirmDialog(null, "Remove selected item?","Confirm",JOptionPane.YES_NO_OPTION);
       if(choice==JOptionPane.YES_OPTION){
       collectiontableModel.removeRow(row); 
       }
    }//GEN-LAST:event_collectionTableMouseClicked
public void printGatepass(){
    int r= collectionTable.getRowCount();
    if(r<1){
JOptionPane.showMessageDialog(null, "Please select equipment from the Equipment in Workshop list!","No Equipment Selected",JOptionPane.WARNING_MESSAGE);
    }else{
  int printloop=2;      

 
      FileOutputStream filename=null; 
     receiptDoc=new Document(PageSize.A4 ); 
      JFileChooser filesaver=new JFileChooser();
       filesaver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
          int option=filesaver.showSaveDialog(gatepassoutPanel);
          
          try {
        String   dir=filesaver.getSelectedFile().toString();
        try {
            Connection connectDb=(Connection)DriverManager.getConnection(access.server, access.username,access.dbpword);
          String sqllogo="SELECT LOGO FROM SETTINGS";
            com.mysql.jdbc.PreparedStatement pstlogo=(com.mysql.jdbc.PreparedStatement) connectDb.prepareStatement(sqllogo);
            ResultSet rst=pstlogo.executeQuery();
            
            if(rst!=null){
            while(rst.next()){
            byte[] byt = null;
            /*sacconame=rst.getString(1);
            saccoaddress=rst.getString(3);
            saccomotto=rst.getString(2);
            saccotel=rst.getString(6);
            email=rst.getString(7);
            mobile=rst.getString(8);*/
            byt=rst.getBytes(1);
            companylogo = Toolkit.getDefaultToolkit().createImage(byt);
            }
            }
          String printdate=new SimpleDateFormat("dd MMM, yyyy").format(Calendar.getInstance().getTime()); 
          
       directory=dir+"/"+clientnameTxt.getText()+" GATEPASS-OUT NOTE "+printdate+" .pdf";
                filename = new FileOutputStream(directory);
            
   PdfWriter writer=PdfWriter.getInstance(receiptDoc ,filename);
            receiptDoc.open();
            
  for(int loop=0;loop<printloop;loop++){           
            Paragraph space=new Paragraph("          ");
            com.itextpdf.text.Font font1=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,22,Font.BOLD);
            com.itextpdf.text.Font font2=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,8,Font.BOLD);
            com.itextpdf.text.Font font3=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.TIMES_ROMAN,18,Font.BOLD);
            com.itextpdf.text.Font font4=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.HELVETICA,8,Font.LAYOUT_LEFT_TO_RIGHT);
             com.itextpdf.text.Font font5=new  com.itextpdf.text.Font( com.itextpdf.text.Font.FontFamily.COURIER,9,Font.LAYOUT_LEFT_TO_RIGHT);
            
    if(loop<1){
     Paragraph date=new Paragraph( "Original | Printed: "+printdate,font4);
            date.setAlignment(Paragraph.ALIGN_RIGHT);
            receiptDoc.add(date);
    }
    else{
     Paragraph date=new Paragraph( " Copy | Printed: "+printdate,font4);
            date.setAlignment(Paragraph.ALIGN_RIGHT);
            receiptDoc.add(date);
    }
           
            
          com.itextpdf.text.Image image = com.itextpdf.text.Image.getInstance(  companylogo , null); 
image.setAbsolutePosition(05, 780);
         image.scaleToFit(150,50);
 writer.getDirectContent().addImage(image);  receiptDoc.add(space);   //receiptDoc.add(space); 
  
            //Paragraph schname=new Paragraph( sacconame,font4); schname.setAlignment(Paragraph.ALIGN_CENTER);
              String separator="______________________________________________________________________________";
            Paragraph separatorlable=new Paragraph(separator,font2);
               separatorlable.setAlignment(Paragraph.ALIGN_CENTER);
              //  receiptDoc.add(separatorlable);
      String separator2="  __________________________________________________________________________________________________________________________________";
            Paragraph separatorlable3=new Paragraph(separator2,font2);
               separatorlable3.setAlignment(Paragraph.ALIGN_CENTER);
               
            Paragraph receiptlabel=new Paragraph("TECHNICAL SERVICE DEPARTMENT     ",font1);
            receiptlabel.setAlignment(Paragraph.ALIGN_CENTER);  receiptDoc.add(receiptlabel);
             receiptDoc.add(separatorlable3); 
         receiptDoc.add(space);
         
     Paragraph receiptlabel2=new Paragraph("  EQUIPMENT-OUT GATEPASS",font3);
                receiptlabel2.setAlignment(Paragraph.ALIGN_CENTER);
                receiptDoc.add(receiptlabel2);  
       receiptDoc.add(separatorlable3);  receiptDoc.add(space);
          /*       float[] colswidth4=new float[]{5f,9f};
   PdfPTable colstable2=new PdfPTable(colswidth4);
     colstable2 .setWidthPercentage(50);//colstable.setHorizontalAlignment();
      colstable2.setHorizontalAlignment(Element.ALIGN_RIGHT);  */ 
      
   float[] colswidth;      com.itextpdf.text.pdf.PdfPTable subjreportTable = null;
 
   float[] colswidth2=new float[]{5f,9f,6f,5f,8f};
   PdfPTable colstable=new PdfPTable(colswidth2);
     colstable .setWidthPercentage(100);//colstable.setHorizontalAlignment();
      colstable.setHorizontalAlignment(Element.ALIGN_CENTER); 
      
         PdfPCell cell243=new PdfPCell(new Phrase(" "  ,font4));cell243.setBorder(Rectangle.NO_BORDER);  
 
      
   PdfPCell cell1=new PdfPCell(new Phrase("Client Name: "  ,font2));//cell1.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell1); 
   
     PdfPCell cell3=new PdfPCell(new Phrase( clientnameTxt.getText() ,font4));//cell3.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell3);   colstable.addCell(cell243 ); 
   
  
   
    PdfPCell cell=new PdfPCell(new Phrase("Date Out: "  ,font2));//cell.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell ); 
     PdfPCell cell23=new PdfPCell(new Phrase(printdate  ,font4));//cell23.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell23 ); 
    
   PdfPCell cell2=new PdfPCell(new Phrase("Contact Person: " ,font2));//cell2.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell2);  
     
      PdfPCell cell5=new PdfPCell(new Phrase(" "+contpersonTxt.getText(),font4));//cell5.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell5);  colstable.addCell(cell243 ); 
     
       PdfPCell cell34=new PdfPCell(new Phrase("Taken By: "  ,font2));//cell34.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell34 ); 
 
  PdfPCell cell43=new PdfPCell(new Phrase(collectedbyTxt.getText()  ,font4));//cell43.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell43 );
     
    PdfPCell cell6=new PdfPCell(new Phrase("Phone: " ,font2));//cell6.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell6);  
     
      PdfPCell cell7=new PdfPCell(new Phrase(" "+phoneTxt.getText(),font4));//cell7.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell7);   colstable.addCell(cell243 ); 
     
      PdfPCell cell54=new PdfPCell(new Phrase("ID No: "  ,font2));//cell54.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell54 ); 
 
  PdfPCell cell253=new PdfPCell(new Phrase(jTextField3.getText()  ,font4));//cell43.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell253 );
     
      PdfPCell cell8=new PdfPCell(new Phrase("Email: " ,font2));//cell8.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell8);  
     
       PdfPCell cell9=new PdfPCell(new Phrase(" "+emailTxt.getText(),font4));//cell9.setBorder(Rectangle.NO_BORDER);  
     colstable.addCell(cell9);   colstable.addCell(cell243 ); 
     
      PdfPCell cell541=new PdfPCell(new Phrase("Phone: "  ,font2));//cell541.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell541 ); 
 
  PdfPCell cell251=new PdfPCell(new Phrase(jTextField2.getText()  ,font4));//cell251.setBorder(Rectangle.NO_BORDER);  
   colstable.addCell(cell251 );
   
   receiptDoc.add(colstable);    // receiptDoc.add(colstable2); 
   
   
/* Paragraph cell3=new Paragraph(new Phrase("CONTRACT DESCRIPTION:"+ descriptionTxt.getText()+" ",font2)); 
 cell3.setAlignment(Paragraph.ALIGN_CENTER);
   receiptDoc.add(cell3); */
       
  /*Paragraph receiptlabel3=new Paragraph("VALID FROM: "+validfromTxt.getText()+"    TO: "+toTxt.getText(),font2);
                receiptlabel3.setAlignment(Paragraph.ALIGN_CENTER); receiptDoc.add(receiptlabel3);*/
     //receiptDoc.add(separatorlable3); 
     receiptDoc.add(space); //receiptDoc.add(space);
   
  receiptDoc.add( space);
    Paragraph sign1=new Paragraph("Equipment Details" ,font3);
   sign1.setAlignment(Paragraph.ALIGN_LEFT);receiptDoc.add( sign1);
      colswidth = new float[]{2f,6f,7f,6f,6f,10f  };
       subjreportTable=new  com.itextpdf.text.pdf.PdfPTable(colswidth);
          subjreportTable .setWidthPercentage(90);  subjreportTable.setHorizontalAlignment(Element.ALIGN_LEFT );
  PdfPCell cell218=new PdfPCell(new Phrase(" "));cell218.setBorder(Rectangle.NO_BORDER); 
  cell218.setColspan(6);  
subjreportTable.addCell(cell218);
           Paragraph Paras=new Paragraph("No",font2);
            Paras.getFont().setStyle(Font.BOLD);
            
              Paragraph Paras11=new Paragraph("Date In",font2);
            Paras11.getFont().setStyle(Font.BOLD);
            
             
            Paragraph Paras1=new Paragraph("Model",font2);
            Paras1.getFont().setStyle(Font.BOLD);
            
              Paragraph Paras12=new Paragraph("Description",font2);
            Paras12.getFont().setStyle(Font.BOLD);
            
            Paragraph Paras21=new Paragraph("Serial No.",font2);
            Paras21.getFont().setStyle(Font.BOLD);
            
             Paragraph Paras22=new Paragraph("Fault Reported",font2);
            Paras22.getFont().setStyle(Font.BOLD);
            
             subjreportTable.addCell(Paras);subjreportTable.addCell(Paras11);
            subjreportTable.addCell(Paras1); subjreportTable.addCell(Paras12);
            subjreportTable.addCell(Paras21);  subjreportTable.addCell(Paras22); 
   
          
            String model, description,serial,datein,servicedon,callno,assigned,action,status,  fault,warranty ;
            int n=collectionTable.getRowCount();
            for(int z=0;z<n;z++){
               datein= String.valueOf(collectionTable.getValueAt(z , 2));
                model= String.valueOf(collectionTable.getValueAt(z , 4));
                description=String.valueOf(collectionTable.getValueAt(z ,5));
                serial=String.valueOf(collectionTable.getValueAt(z ,6));
                fault= (String.valueOf(collectionTable.getValueAt(z, 7)));
            
                Paragraph Paras110=new Paragraph(String.valueOf(z+1),font5);
                Paras11.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                 Paragraph Paras311=new Paragraph(datein,font5);
                Paras311.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras211=new Paragraph(model,font5);
                Paras211.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras2111=new Paragraph(description,font5);
                Paras2111.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras330=new Paragraph(serial,font5);
                Paras330.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                Paragraph Paras341=new Paragraph(fault,font5);
                Paras341.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                
                 subjreportTable.addCell(Paras110);subjreportTable.addCell(Paras311);subjreportTable.addCell(Paras211);
                subjreportTable.addCell(Paras2111);   subjreportTable.addCell(Paras330);subjreportTable.addCell(Paras341);
             }
       receiptDoc.add(subjreportTable);     receiptDoc.add( space);
    //receiptDoc.add(separatorlable3); 
    
  Paragraph sign2=new Paragraph("Service Details" ,font3);
   sign2.setAlignment(Paragraph.ALIGN_LEFT);
   receiptDoc.add( sign2);
   
     float[] colswidth45 = new float[]{6f,6f,6f,12f,5f,7f,5f  };
    PdfPTable   subjreportTable2=new  com.itextpdf.text.pdf.PdfPTable(colswidth45);
          subjreportTable2 .setWidthPercentage(100);  subjreportTable2.setHorizontalAlignment(Element.ALIGN_LEFT);  
          
  PdfPCell cell219=new PdfPCell(new Phrase(" ."));cell219.setBorder(Rectangle.NO_BORDER); 
  cell219.setColspan(7); subjreportTable2.addCell(cell219); 
  
            Paragraph Paras37=new Paragraph("Call No.",font2);
            Paras37.getFont().setStyle(Font.BOLD);
            
          Paragraph Paras331=new Paragraph("Serial No.",font2);
            Paras331.getFont().setStyle(Font.BOLD);
          
          Paragraph Paras33=new Paragraph("Serviced On",font2);
            Paras33.getFont().setStyle(Font.BOLD);
          Paragraph Paras39=new Paragraph("Action Taken",font2);
            Paras39.getFont().setStyle(Font.BOLD);
            
               Paragraph Paras40=new Paragraph("Status",font2);
            Paras40.getFont().setStyle(Font.BOLD);
              Paragraph Paras38=new Paragraph("Technician",font2);
            Paras38.getFont().setStyle(Font.BOLD);
            Paragraph Paras41=new Paragraph("Sign.",font2);
            Paras41.getFont().setStyle(Font.BOLD);
            
        subjreportTable2.addCell(Paras37);  subjreportTable2.addCell(Paras331);subjreportTable2.addCell(Paras33);
               subjreportTable2.addCell(Paras39);   
                subjreportTable2.addCell(Paras40);  subjreportTable2.addCell(Paras38);   subjreportTable2.addCell(Paras41);  
        int n2=collectionTable.getRowCount();          
     for(int c=0;c<n2;c++){
          serial=String.valueOf(collectionTable.getValueAt(c ,6));
       servicedon=(String.valueOf(collectionTable.getValueAt(c, 8)));
               callno=(String.valueOf(collectionTable.getValueAt(c, 9)));
               assigned=(String.valueOf(collectionTable.getValueAt(c, 10)));
               action=(String.valueOf(collectionTable.getValueAt(c, 11)));
               status=(String.valueOf(collectionTable.getValueAt(c, 12)));
                    
               Paragraph Paras61=new Paragraph(callno,font5);
                Paras61.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                subjreportTable2.addCell(Paras61);
               
                Paragraph Paras342=new Paragraph(serial,font5);
                Paras342.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT); 
                  subjreportTable2.addCell(Paras342);
                
                 Paragraph Paras60=new Paragraph(servicedon,font5);
                Paras60.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT); 
                  subjreportTable2.addCell(Paras60);
                
               
                    Paragraph Paras63=new Paragraph(action,font5);
                Paras63.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                subjreportTable2.addCell(Paras63);
                
                  Paragraph Paras64=new Paragraph(status,font5);
                Paras64.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                subjreportTable2.addCell(Paras64);
                  Paragraph Paras62=new Paragraph(assigned,font5);
                Paras62.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                subjreportTable2.addCell(Paras62);
                 Paragraph Paras65=new Paragraph(" ",font5);
                Paras65.getFont().setStyle(Font.LAYOUT_LEFT_TO_RIGHT);
                subjreportTable2.addCell(Paras65);
   }       
     /*        
   PdfPCell cell78=new PdfPCell(new Phrase("  " ,font5));cell78.setBorder(Rectangle.NO_BORDER);  
   subjreportTable.addCell(cell78);  subjreportTable.addCell(cell78);  subjreportTable.addCell(cell78);  subjreportTable.addCell(cell78); 
    subjreportTable.addCell(cell78);       subjreportTable.addCell(cell78);  
    */
 
    receiptDoc.add( subjreportTable2);
     receiptDoc.add( space);receiptDoc.add(space); 
     
    float[] colswidth6=new float[]{4f,4f,4f};     
 PdfPTable signatureTable=new PdfPTable(colswidth6);
 signatureTable.setWidthPercentage(108); 
 signatureTable.setHorizontalAlignment(Element.ALIGN_LEFT);  
 
 

 PdfPCell cell29=new PdfPCell(new Phrase(" "));cell29.setBorder(Rectangle.NO_BORDER); 
if(loop<1){
    Paragraph sign5=new Paragraph("Authorised By: ________________________" ,font2);
   sign5.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell27=new PdfPCell(sign5);cell27.setBorder(Rectangle.NO_BORDER);
    signatureTable.addCell(cell27); 
    
     Paragraph sign56=new Paragraph(" Signature:________________________  " ,font2);
   sign56.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell289=new PdfPCell(sign56);cell289.setBorder(Rectangle.NO_BORDER);
    signatureTable.addCell(cell289); 
    
       Paragraph sign562=new Paragraph(" Date:________________________ " ,font2);
   sign562.setAlignment(Paragraph.ALIGN_LEFT); 
    PdfPCell cell283=new PdfPCell(sign562);cell283.setBorder(Rectangle.NO_BORDER);
    signatureTable.addCell(cell283); 
   
     signatureTable.addCell(cell29);    signatureTable.addCell(cell29);    signatureTable.addCell(cell29); 
  receiptDoc.add(space);receiptDoc.add(space);  receiptDoc.add(signatureTable);  receiptDoc.add(space);
}
else{
    
 Paragraph sign3=new Paragraph("Received By:________________________  " ,font2);
   sign3.setAlignment(Paragraph.ALIGN_LEFT);
    PdfPCell cell25=new PdfPCell(sign3);cell25.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell25); 
   
      Paragraph sign31=new Paragraph("Signature:________________________ " ,font2);
   sign31.setAlignment(Paragraph.ALIGN_LEFT);
    PdfPCell cell234=new PdfPCell(sign31);cell234.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell234); 
   
     Paragraph sign4=new Paragraph(" Date:________________________ " ,font2);
     sign4.setAlignment(Paragraph.ALIGN_LEFT);
      PdfPCell cell89=new PdfPCell(sign4);cell89.setBorder(Rectangle.NO_BORDER);
   signatureTable.addCell(cell89);
     
receiptDoc.add(space);receiptDoc.add(space);   receiptDoc.add(signatureTable);  receiptDoc.add(space);receiptDoc.add(space);
}
   
    Paragraph NOTE2=new Paragraph("Company Stamp:_______________________",font2);
            NOTE2.setAlignment(Paragraph.ALIGN_LEFT);
     receiptDoc.add(NOTE2); receiptDoc.add(space);
   
   receiptDoc.add(space);
  
   receiptDoc.add(space);receiptDoc.add(space); //receiptDoc.add(space);
    receiptDoc.add(space);//receiptDoc.add(space); receiptDoc.add(space);receiptDoc.add(space);
   
   Paragraph NOTE=new Paragraph("  ",font4);
  NOTE.setAlignment(Paragraph.ALIGN_CENTER);
  receiptDoc.add(space);receiptDoc.add(space);
        Paragraph user=new Paragraph("TECHNICAL SERVICE DEPARTMENT                                      System Generated By: "+currentuser+" on "+printdate,font4);
            user.setAlignment(Paragraph.ALIGN_CENTER);
       
  receiptDoc.add(user);
receiptDoc.newPage();
    }
     receiptDoc.close();
        }   catch (SQLException | DocumentException | FileNotFoundException ex) {
            Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Executable.openDocument(directory);
        
    }   catch (IOException ex) {
              Logger.getLogger(Calltracking.class.getName()).log(Level.SEVERE, null, ex);
          }
          
        
 
    }

}
    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField clientnameTxt;
    private javax.swing.JTextField collectedbyTxt;
    private javax.swing.JTable collectionTable;
    private javax.swing.JTextField contpersonTxt;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JTable equiplistTable;
    public javax.swing.JPanel gatepassoutPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField phoneTxt;
    private javax.swing.JTextField searchserialTxt;
    // End of variables declaration//GEN-END:variables
}
